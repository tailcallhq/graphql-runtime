name: build

on:
  push:
    branches: [main]
  pull_request:

jobs:
  check:
    name: Rust project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format code
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

#  deploy:
#    name: Deploy app
#    runs-on: ubuntu-latest
#    needs: check
#    if: github.ref == 'refs/heads/main'
#    steps:
#      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
#      - uses: superfly/flyctl-actions/setup-flyctl@master
#      - run: flyctl deploy --remote-only
#        env:
#          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  release:
    name: Release
    needs: [check]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{secrets.GITHUBTOKEN}}

    steps:
      - name: Checkout current branch (fast)
        uses: actions/checkout@v4

      - id: create_release
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml

      - name: Setup Cross
        run: cargo install cross
      - name: Install OpenSSL development libraries
        run: sudo apt-get install -y libssl-dev pkg-config

      - name: Build for x86_64-unknown-linux-gnu
        env:
          APP_VERSION: ${{steps.create_release.outputs.name}}
        run: cross build --release --target x86_64-unknown-linux-gnu

      - name: Build for x86_64-pc-windows-msvc
        env:
          APP_VERSION: ${{steps.create_release.outputs.name}}
        run: cross build --release --target x86_64-pc-windows-msvc

      - name: Build for x86_64-apple-darwin
        env:
          APP_VERSION: ${{steps.create_release.outputs.name}}
        run: cross build --release --target x86_64-apple-darwin

      - name: Build for aarch64-apple-darwin (Apple M1)
        env:
          APP_VERSION: ${{steps.create_release.outputs.name}}
        run: cross build --release --target aarch64-apple-darwin


      - name: Upload Linux Binary
        uses: xresloader/upload-to-github-release@v1
        with:
          release_id: ${{steps.create_release.outputs.id}}
          file: target/x86_64-unknown-linux-gnu/release/tailcall
          overwrite: true

      - name: Upload Windows Binary
        uses: xresloader/upload-to-github-release@v1
        with:
          release_id: ${{steps.create_release.outputs.id}}
          file: target/x86_64-pc-windows-msvc/release/tailcall.exe
          overwrite: true

      - name: Upload macOS Binary
        uses: xresloader/upload-to-github-release@v1
        with:
          release_id: ${{steps.create_release.outputs.id}}
          file: target/x86_64-apple-darwin/release/tailcall
          overwrite: true

      - name: Upload Apple M1 Binary
        uses: xresloader/upload-to-github-release@v1
        with:
          release_id: ${{steps.create_release.outputs.id}}
          file: target/aarch64-apple-darwin/release/tailcall
          overwrite: true
