se crate::config::Config;

pub struct FanOutFinder<'a> {
    config: &'a Config,
    type_name: &'a String,
    path: Vec<(String, String)>,
    is_list: bool,
}

impl<'a> FanOutFinder<'a> {
    fn find_fan_out(&self) -> Vec<Vec<(String, String)>> {
        match self.config.find_type(self.type_name) {
            Some(type_) => type_
                .fields
                .iter()
                .flat_map(|(field_name, field)| {
                    let mut new_path = self.path.clone();
                    new_path.push((self.type_name.clone(), field_name.clone()));
                    if self.path.iter().any(|item| &item.0 == self.type_name && &item.1 == field_name) {
                        Vec::new()
                    } else if field.has_resolver() && !field.has_batched_resolver() && self.is_list {
                        vec![new_path]
                    } else {
                        let finder = FanOutFinder {
                            config: self.config,
                            type_name: &field.type_of,
                            path: new_path,
                            is_list: field.list || self.is_list,
                        };
                        finder.find_fan_out()
                    }
                })
                .collect(),
            None => Vec::new(),
        }
    }
}

pub fn n_plus_one(config: &Config) -> Vec<Vec<(String, String)>> {
    if let Some(query) = &config.graphql.schema.query {
        let finder = FanOutFinder {
            config,
            type_name: query,
            path: Vec::new(),
            is_list: false,
        };
        finder.find_fan_out()
    } else {
        Vec::new()
    }
}
