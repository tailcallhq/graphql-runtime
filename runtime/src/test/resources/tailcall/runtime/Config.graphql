schema @server(baseURL: "https://jsonplaceholder.typicode.com") {
  query: Query
  mutation: Mutation
}

input NewAddress {
  geo: NewGeo
  street: String
  suite: String
  city: String
  zipcode: String
}

input NewCompany {
  name: String
  catchPhrase: String
  bs: String
}

input NewGeo {
  lat: String
  lng: String
}

input NewUser {
  website: String
  name: String!
  email: String!
  username: String!
  company: NewCompany
  address: NewAddress
  phone: String
}

type Address {
  geo: Geo
  street: String
  suite: String
  city: String
  zipcode: String
}

type Company {
  name: String
  catchPhrase: String
  bs: String
}

type Geo {
  lat: String
  lng: String
}

"A general purpose Id container, used when an object is created an only the Id is returned"
type Id {
  id: Int!
}

type Mutation {
  createUser("The user to create" user: NewUser!): Id @steps(value: [{http: {path: "/users",method: "POST"}}])
}

type Post {
  body: String
  id: Int!
  user: User @steps(value: [{objectPath: {userId: ["value","userId"]}},{http: {path: "/users/{{userId}}"}}])
  userId: Int!
  title: String
}

type Query {
  "A list of all posts"
  posts: [Post] @steps(value: [{http: {path: "/posts"}}])
  "A list of all users"
  users: [User] @steps(value: [{http: {path: "/users"}}])
  "A single post"
  post(id: Int!): Post @steps(value: [{http: {path: "/posts/{{args.id}}"}}])
  "A single user"
  user(id: Int!): User @steps(value: [{objectPath: {userId: ["args","id"]}},{http: {path: "/users/{{userId}}"}}])
}

type User {
  website: String
  name: String!
  posts: [Post] @steps(value: [{http: {path: "/users/{{value.id}}/posts"}}])
  email: String!
  username: String!
  company: Company
  id: Int!
  address: Address
  phone: String
}