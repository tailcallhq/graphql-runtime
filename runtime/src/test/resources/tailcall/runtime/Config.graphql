schema @server(baseURL: "https://jsonplaceholder.typicode.com") {
  query: Query
  mutation: Mutation
}

input NewAddress {
  city: String
  geo: NewGeo
  street: String
  suite: String
  zipcode: String @modify(name: "zip")
}

input NewCompany {
  bs: String
  catchPhrase: String
  name: String
}

input NewGeo {
  lat: String
  lng: String
}

"A new user."
input NewUser {
  address: NewAddress
  company: NewCompany
  email: String!
  name: String!
  phone: String
  username: String!
  website: String
}

type Address {
  city: String
  geo: Geo
  street: String
  suite: String
  zipcode: String @modify(name: "zip")
}

type Company {
  bs: String
  catchPhrase: String
  name: String
}

type Geo {
  lat: String
  lng: String
}

"An Id container."
type Id {
  id: Int!
}

type Mutation {
  createUser("User as an argument." user: NewUser!): Id @unsafe(steps: [{http: {path: "/users",method: "POST",body: "{{args.user}}"}}])
}

type Post {
  body: String
  id: Int!
  title: String
  user: User @unsafe(steps: [{transform: {objPath: {userId: ["value","userId"]}}},{http: {path: "/users/{{userId}}"}}])
  userId: Int!
}

type Query {
  "A single post by id."
  post(id: Int!): Post @unsafe(steps: [{http: {path: "/posts/{{args.id}}"}}])
  "A list of all posts."
  posts: [Post] @unsafe(steps: [{http: {path: "/posts"}}])
  "An unused field that will be omitted."
  unusedField: String @modify(omit: true)
  "A single user by id."
  user(id: Int!): User @unsafe(steps: [{transform: {objPath: {userId: ["args","id"]}}},{http: {path: "/users/{{userId}}"}}])
  "A list of all users."
  users: [User] @unsafe(steps: [{http: {path: "/users"}}])
}

type User {
  address: Address
  company: Company
  email: String!
  id: Int!
  name: String!
  phone: String
  posts: [Post] @unsafe(steps: [{http: {path: "/users/{{value.id}}/posts"}}])
  username: String!
  website: String
}