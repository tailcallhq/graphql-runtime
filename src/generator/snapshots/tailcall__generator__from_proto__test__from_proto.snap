---
source: src/generator/from_proto.rs
expression: result
---
schema @server @upstream {
  query: Query
}

input News__Author @tag(id: "news.Author") {
  email: String
  name: String
}

input News__News @tag(id: "news.News") {
  author: News__Author
  body: String
  foo: News__Status
  id: Int
  postImage: String
  title: String
}

enum News__Status @tag(id: "news.Status") {
  DRAFT
  PUBLISHED
}

type B {
  sayHello(helloRequest: GreetingsAB__HelloRequest!): GreetingsAB__HelloReply! @grpc(method: "greetings_a.b.Greeter.SayHello")
}

type C {
  sayHello(helloRequest: GreetingsBC__HelloRequest!): GreetingsBC__HelloReply! @grpc(method: "greetings_b.c.Greeter.SayHello")
}

type GreetingsA {
  b: B
}

type GreetingsAB__HelloReply @tag(id: "greetings_a.b.HelloReply") {
  message: String
}

type GreetingsB {
  c: C
}

type GreetingsBC__HelloReply @tag(id: "greetings_b.c.HelloReply") {
  message: String
}

type News {
  addNews(news: News__News!): News__News! @grpc(method: "news.NewsService.AddNews")
  deleteNews(newsId: News__NewsId!): News__Empty! @grpc(method: "news.NewsService.DeleteNews")
  editNews(news: News__News!): News__News! @grpc(method: "news.NewsService.EditNews")
  getAllNews: News__NewsList! @grpc(method: "news.NewsService.GetAllNews")
  getMultipleNews(multipleNewsId: News__MultipleNewsId!): News__NewsList! @grpc(method: "news.NewsService.GetMultipleNews")
  getNews(newsId: News__NewsId!): News__News! @grpc(method: "news.NewsService.GetNews")
}

type News__NewsList @tag(id: "news.NewsList") {
  news: [News__News]
}

type Query {
  greetingsA: GreetingsA
  greetingsB: GreetingsB
  news: News
}
