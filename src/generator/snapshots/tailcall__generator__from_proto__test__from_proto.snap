---
source: src/generator/from_proto.rs
expression: result
---
schema @server @upstream {
  query: Query
}

input GREETINGS_A_B_HELLO_REQUEST @tag(id: "greetings_a.b.HelloRequest") {
  name: String
}

input GREETINGS_B_C_HELLO_REQUEST @tag(id: "greetings_b.c.HelloRequest") {
  name: String
}

input NEWS_AUTHOR @tag(id: "news.Author") {
  email: String
  name: String
}

input NEWS_MULTIPLE_NEWS_ID @tag(id: "news.MultipleNewsId") {
  ids: [NEWS_NEWS_ID]!
}

input NEWS_NEWS @tag(id: "news.News") {
  author: NEWS_AUTHOR
  body: String
  foo: NEWS_STATUS
  id: Int
  post_image: String
  title: String
}

input NEWS_NEWS_ID @tag(id: "news.NewsId") {
  id: Int
}

enum NEWS_STATUS {
  DRAFT
  PUBLISHED
}

type GREETINGS_A_B_HELLO_REPLY @tag(id: "greetings_a.b.HelloReply") {
  message: String
}

type GREETINGS_B_C_HELLO_REPLY @tag(id: "greetings_b.c.HelloReply") {
  message: String
}

type NEWS_NEWS_LIST @tag(id: "news.NewsList") {
  news: [NEWS_NEWS]!
}

type Query {
  greetings_a_b_say_hello(hello_request: GREETINGS_A_B_HELLO_REQUEST!): GREETINGS_A_B_HELLO_REPLY! @grpc(method: "greetings_a.b.SayHello")
  greetings_b_c_say_hello(hello_request: GREETINGS_B_C_HELLO_REQUEST!): GREETINGS_B_C_HELLO_REPLY! @grpc(method: "greetings_b.c.SayHello")
  news_add_news(news: NEWS_NEWS!): NEWS_NEWS! @grpc(method: "news.AddNews")
  news_delete_news(news_id: NEWS_NEWS_ID!): NEWS_EMPTY! @grpc(method: "news.DeleteNews")
  news_edit_news(news: NEWS_NEWS!): NEWS_NEWS! @grpc(method: "news.EditNews")
  news_get_all_news: NEWS_NEWS_LIST! @grpc(method: "news.GetAllNews")
  news_get_multiple_news(multiple_news_id: NEWS_MULTIPLE_NEWS_ID!): NEWS_NEWS_LIST! @grpc(method: "news.GetMultipleNews")
  news_get_news(news_id: NEWS_NEWS_ID!): NEWS_NEWS! @grpc(method: "news.GetNews")
}
