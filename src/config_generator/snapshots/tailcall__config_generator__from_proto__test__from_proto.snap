---
source: src/config_generator/from_proto.rs
expression: result
---
schema @server @upstream {
  query: Query
}

input GreetingsAB__HelloRequest @tag(id: "greetings_a.b.HelloRequest") {
  name: String
}

input GreetingsBC__HelloRequest @tag(id: "greetings_b.c.HelloRequest") {
  name: String
}

input News__Author @tag(id: "news.Author") {
  email: String
  name: String
}

input News__MultipleNewsId @tag(id: "news.MultipleNewsId") {
  ids: [News__NewsId]
}

input News__News @tag(id: "news.News") {
  author: News__Author
  body: String
  foo: News__Status
  id: Int
  postImage: String
  title: String
}

input News__NewsId @tag(id: "news.NewsId") {
  id: Int
}

enum News__Status @tag(id: "news.Status") {
  DRAFT
  PUBLISHED
}

type GreetingsAB__HelloReply @tag(id: "greetings_a.b.HelloReply") {
  message: String
}

type GreetingsBC__HelloReply @tag(id: "greetings_b.c.HelloReply") {
  message: String
}

type News__NewsList @tag(id: "news.NewsList") {
  news: [News__News]
}

type Query {
  greetingsAb__sayHello(helloRequest: GreetingsAB__HelloRequest!): GreetingsAB__HelloReply! @grpc(method: "greetings_a.b.Greeter.SayHello")
  greetingsBc__sayHello(helloRequest: GreetingsBC__HelloRequest!): GreetingsBC__HelloReply! @grpc(method: "greetings_b.c.Greeter.SayHello")
  news__addNews(news: News__News!): News__News! @grpc(method: "news.NewsService.AddNews")
  news__deleteNews(newsId: News__NewsId!): String @grpc(method: "news.NewsService.DeleteNews")
  news__editNews(news: News__News!): News__News! @grpc(method: "news.NewsService.EditNews")
  news__getAllNews: News__NewsList! @grpc(method: "news.NewsService.GetAllNews")
  news__getMultipleNews(multipleNewsId: News__MultipleNewsId!): News__NewsList! @grpc(method: "news.NewsService.GetMultipleNews")
  news__getNews(newsId: News__NewsId!): News__News! @grpc(method: "news.NewsService.GetNews")
}
