---
source: src/config_generator/from_proto.rs
expression: result
---
schema @server @upstream {
  query: Query
}

input GREETINGS_DUP_HelloRequest @tag(name: "greetings_dup.HelloRequest")  {
  name: String
}

input GREETINGS_HelloRequest @tag(name: "greetings.HelloRequest")  {
  name: String
}

input NEWS_Author @tag(name: "news.Author")  {
  email: String
  name: String
}

input NEWS_MultipleNewsId @tag(name: "news.MultipleNewsId")  {
  ids: [NEWS_NewsId]
}

input NEWS_News @tag(name: "news.News")  {
  author: NEWS_Author
  body: String
  foo: NEWS_Status
  id: Int
  postImage: String
  title: String
}

input NEWS_NewsId @tag(name: "news.NewsId")  {
  id: Int
}

enum NEWS_Status @tag(name: "news.Status")  {
  DRAFT
  PUBLISHED
}

type GREETINGS_DUP_HelloReply @tag(name: "greetings_dup.HelloReply") {
  message: String
}

type GREETINGS_HelloReply @tag(name: "greetings.HelloReply") {
  message: String
}

type NEWS_NewsList @tag(name: "news.NewsList") {
  news: [NEWS_News]
}

type Query {
  greetings_dup_sayHello(helloRequest: GREETINGS_DUP_HelloRequest!): GREETINGS_DUP_HelloReply! @grpc(method: "greetings_dup.Greeter.SayHello")
  greetings_sayHello(helloRequest: GREETINGS_HelloRequest!): GREETINGS_HelloReply! @grpc(method: "greetings.Greeter.SayHello")
  news_addNews(news: NEWS_News!): NEWS_News! @grpc(method: "news.NewsService.AddNews")
  news_deleteNews(newsId: NEWS_NewsId!): String @grpc(method: "news.NewsService.DeleteNews")
  news_editNews(news: NEWS_News!): NEWS_News! @grpc(method: "news.NewsService.EditNews")
  news_getAllNews: NEWS_NewsList! @grpc(method: "news.NewsService.GetAllNews")
  news_getMultipleNews(multipleNewsId: NEWS_MultipleNewsId!): NEWS_NewsList! @grpc(method: "news.NewsService.GetMultipleNews")
  news_getNews(newsId: NEWS_NewsId!): NEWS_News! @grpc(method: "news.NewsService.GetNews")
}
