---
source: src/config_generator/from_proto.rs
expression: result
---
schema @server @upstream {
  query: Query
}

input GREETINGS_A_B__HelloRequest @tag(id: "greetings_a.b.HelloRequest") {
  name: String
}

input GREETINGS_B_C__HelloRequest @tag(id: "greetings_b.c.HelloRequest") {
  name: String
}

input NEWS__Author @tag(id: "news.Author") {
  email: String
  name: String
}

input NEWS__MultipleNewsId @tag(id: "news.MultipleNewsId") {
  ids: [NEWS__NewsId]
}

input NEWS__News @tag(id: "news.News") {
  author: NEWS__Author
  body: String
  foo: NEWS__Status
  id: Int
  postImage: String
  title: String
}

input NEWS__NewsId @tag(id: "news.NewsId") {
  id: Int
}

enum NEWS__Status @tag(id: "news.Status") {
  DRAFT
  PUBLISHED
}

type GREETINGS_A_B__HelloReply @tag(id: "greetings_a.b.HelloReply") {
  message: String
}

type GREETINGS_B_C__HelloReply @tag(id: "greetings_b.c.HelloReply") {
  message: String
}

type NEWS__NewsList @tag(id: "news.NewsList") {
  news: [NEWS__News]
}

type Query {
  greetings_a_b__sayHello(helloRequest: GREETINGS_A_B__HelloRequest!): GREETINGS_A_B__HelloReply! @grpc(method: "greetings_a.b.Greeter.SayHello")
  greetings_b_c__sayHello(helloRequest: GREETINGS_B_C__HelloRequest!): GREETINGS_B_C__HelloReply! @grpc(method: "greetings_b.c.Greeter.SayHello")
  news__addNews(news: NEWS__News!): NEWS__News! @grpc(method: "news.NewsService.AddNews")
  news__deleteNews(newsId: NEWS__NewsId!): String @grpc(method: "news.NewsService.DeleteNews")
  news__editNews(news: NEWS__News!): NEWS__News! @grpc(method: "news.NewsService.EditNews")
  news__getAllNews: NEWS__NewsList! @grpc(method: "news.NewsService.GetAllNews")
  news__getMultipleNews(multipleNewsId: NEWS__MultipleNewsId!): NEWS__NewsList! @grpc(method: "news.NewsService.GetMultipleNews")
  news__getNews(newsId: NEWS__NewsId!): NEWS__News! @grpc(method: "news.NewsService.GetNews")
}
