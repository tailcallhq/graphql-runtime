---
source: src/core/config/transformer/ambiguous_type.rs
expression: config.to_sdl()
---
schema @server @upstream {
  query: Query
}

input GEN__news__MultipleNewsId {
  ids: [GEN__news__NewsId]
}

input GEN__news__NewsId {
  id: Int
}

input GEN__news__NewsInput {
  body: String
  id: Int
  postImage: String
  status: GEN__news__Status
  title: String
}

enum GEN__news__Status {
  DELETED
  DRAFT
  PUBLISHED
}

type GEN__news__News {
  body: String
  id: Int
  postImage: String
  status: GEN__news__Status
  title: String
}

type GEN__news__NewsList {
  news: [GEN__news__News]
}

type Query {
  GEN__news__NewsService__AddNews(news: GEN__news__NewsInput!): GEN__news__News @grpc(body: "{{.args.news}}", method: "news.NewsService.AddNews")
  GEN__news__NewsService__DeleteNews(newsId: GEN__news__NewsId!): Empty @grpc(body: "{{.args.newsId}}", method: "news.NewsService.DeleteNews")
  GEN__news__NewsService__EditNews(news: GEN__news__NewsInput!): GEN__news__News @grpc(body: "{{.args.news}}", method: "news.NewsService.EditNews")
  GEN__news__NewsService__GetAllNews: GEN__news__NewsList @grpc(method: "news.NewsService.GetAllNews")
  GEN__news__NewsService__GetMultipleNews(multipleNewsId: GEN__news__MultipleNewsId!): GEN__news__NewsList @grpc(body: "{{.args.multipleNewsId}}", method: "news.NewsService.GetMultipleNews")
  GEN__news__NewsService__GetNews(newsId: GEN__news__NewsId!): GEN__news__News @grpc(body: "{{.args.newsId}}", method: "news.NewsService.GetNews")
}
