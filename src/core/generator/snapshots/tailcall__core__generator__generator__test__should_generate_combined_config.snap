---
source: src/core/generator/generator.rs
expression: cfg_module.config().to_sdl()
---
schema @server(hostname: "0.0.0.0", port: 8000) @upstream(allowedHeaders: ["authorization"], baseURL: "https://example.com", httpCache: 42) @link(src: "../../../tailcall-fixtures/fixtures/protobuf/news.proto", type: Protobuf) {
  query: Query
}

input GEN__news__MultipleNewsId {
  ids: [Id]
}

input GEN__news__NewsInput {
  body: String
  id: Int
  postImage: String
  status: Status
  title: String
}

input Id {
  id: Int
}

enum Status {
  DELETED
  DRAFT
  PUBLISHED
}

type Album {
  id: Int!
  photos: [Photo] @http(path: "/albums/{{.value.id}}/photos?_limit=3")
  title: Int
  userId: Int!
}

type Comment {
  body: String!
  email: String!
  id: Int!
  name: String!
  title: String! @expr(body: "{{.value.email}}: {{.value.name}}")
}

type GEN__news__NewsList {
  news: [News]
}

type InCompatibleProperty {
  campaignTemplates: JSON
  colors: [JSON]
}

type News {
  body: String
  id: Int
  postImage: String
  status: Status
  title: String
}

type Photo {
  albumId: Int!
  combinedId: String! @expr(body: "Album: {{.value.albumId}}, photo: {{.value.id}}")
  id: Int!
  title: String!
}

type Post {
  body: String!
  comments: [Comment] @http(path: "/posts/{{.value.id}}/comments")
  id: Int!
  title: String!
  user: User @http(path: "/users/{{.value.userId}}")
  userId: Int!
  users: [User] @http(path: "/users")
}

type Query {
  GEN__news__NewsService__AddNews(news: GEN__news__NewsInput!): News @grpc(body: "{{.args.news}}", method: "news.NewsService.AddNews")
  GEN__news__NewsService__DeleteNews(newsId: Id!): Empty @grpc(body: "{{.args.newsId}}", method: "news.NewsService.DeleteNews")
  GEN__news__NewsService__EditNews(news: GEN__news__NewsInput!): News @grpc(body: "{{.args.news}}", method: "news.NewsService.EditNews")
  GEN__news__NewsService__GetAllNews: GEN__news__NewsList @grpc(method: "news.NewsService.GetAllNews")
  GEN__news__NewsService__GetMultipleNews(multipleNewsId: GEN__news__MultipleNewsId!): GEN__news__NewsList @grpc(body: "{{.args.multipleNewsId}}", method: "news.NewsService.GetMultipleNews")
  GEN__news__NewsService__GetNews(newsId: Id!): News @grpc(body: "{{.args.newsId}}", method: "news.NewsService.GetNews")
  inCompatibleProperties: InCompatibleProperty @http(path: "/")
  post(id: Int! = 1): Post @http(path: "/posts/{{.args.id}}")
  posts: [Post] @http(path: "/posts?_limit=11")
  user(id: Int!): User @http(path: "/users/{{.args.id}}")
  users: [User] @http(path: "/users")
}

type User {
  albums: [Album] @http(path: "/users/{{.value.id}}/albums?_limit=2")
  blog: String @expr(body: "https://test.blog/users/website/{{.value.username}}")
  email: String!
  id: Int!
  name: String!
  phone: String
  username: String!
}
