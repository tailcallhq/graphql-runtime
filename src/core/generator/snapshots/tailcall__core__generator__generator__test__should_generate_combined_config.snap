---
source: src/core/generator/generator.rs
expression: cfg_module.config().to_sdl()
---
schema @server(hostname: "0.0.0.0", port: 8000) @upstream(baseURL: "https://example.com", httpCache: 42) @link(src: "../../../tailcall-fixtures/fixtures/protobuf/news.proto", type: Protobuf) {
  query: Query
}

scalar Any

input Id @tag(id: "news.NewsId") {
  id: Int
}

input news__MultipleNewsId @tag(id: "news.MultipleNewsId") {
  ids: [Id]
}

input news__NewsInput @tag(id: "news.News") {
  body: String
  id: Int
  postImage: String
  status: news__Status
  title: String
}

enum news__Status {
  DELETED
  DRAFT
  PUBLISHED
}

type F1 {
  campaignTemplates: Any
  colors: [Any]
}

type News @tag(id: "news.News") {
  body: String
  id: Int
  postImage: String
  status: news__Status
  title: String
}

type NewsNewsServiceGetMultipleNew @tag(id: "news.NewsList") {
  news: [News]
}

type Post {
  body: String!
  id: Int!
  title: String!
  user: User @http(path: "/users/{{.value.userId}}")
  userId: Int!
}

type Query {
  f1: F1 @http(path: "/")
  news__NewsService__AddNews(news: news__NewsInput!): News! @grpc(body: "{{.args.news}}", method: "news.NewsService.AddNews")
  news__NewsService__DeleteNews(newsId: news__NewsId!): Empty! @grpc(body: "{{.args.newsId}}", method: "news.NewsService.DeleteNews")
  news__NewsService__EditNews(news: news__NewsInput!): News! @grpc(body: "{{.args.news}}", method: "news.NewsService.EditNews")
  news__NewsService__GetAllNews: NewsNewsServiceGetMultipleNew! @grpc(method: "news.NewsService.GetAllNews")
  news__NewsService__GetMultipleNews(multipleNewsId: news__MultipleNewsId!): NewsNewsServiceGetMultipleNew! @grpc(body: "{{.args.multipleNewsId}}", method: "news.NewsService.GetMultipleNews")
  news__NewsService__GetNews(newsId: news__NewsId!): News! @grpc(body: "{{.args.newsId}}", method: "news.NewsService.GetNews")
  post(id: Int!): Post @http(path: "/posts/{{.args.id}}")
  posts: [Post] @http(path: "/posts")
  user(id: Int!): User @http(path: "/users/{{.args.id}}")
  users: [User] @http(path: "/users")
}

type User {
  email: String!
  id: Int!
  name: String!
  phone: String
  username: String!
  website: String @expr(body: "/users/website/{{.value.username}}")
}
