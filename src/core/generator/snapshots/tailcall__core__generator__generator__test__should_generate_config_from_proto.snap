---
source: src/core/generator/generator.rs
expression: cfg_module.config.to_sdl()
---
schema @server @upstream @link(src: "../../../tailcall-fixtures/fixtures/protobuf/news.proto", type: Protobuf) {
  query: Query
}

input Id @tag(id: "news.NewsId") {
  id: Int
}

input news__MultipleNewsId @tag(id: "news.MultipleNewsId") {
  ids: [Id]
}

enum news__Status {
  DELETED
  DRAFT
  PUBLISHED
}

type News @tag(id: "news.News") {
  body: String
  id: Int
  postImage: String
  status: news__Status
  title: String
}

type NewsNewsServiceGetMultipleNew @tag(id: "news.NewsList") {
  news: [News]
}

type Query {
  news__NewsService__AddNews(news: news__News!): News! @grpc(body: "{{.args.news}}", method: "news.NewsService.AddNews")
  news__NewsService__DeleteNews(newsId: news__NewsId!): Empty! @grpc(body: "{{.args.newsId}}", method: "news.NewsService.DeleteNews")
  news__NewsService__EditNews(news: news__News!): News! @grpc(body: "{{.args.news}}", method: "news.NewsService.EditNews")
  news__NewsService__GetAllNews: NewsNewsServiceGetMultipleNew! @grpc(method: "news.NewsService.GetAllNews")
  news__NewsService__GetMultipleNews(multipleNewsId: news__MultipleNewsId!): NewsNewsServiceGetMultipleNew! @grpc(body: "{{.args.multipleNewsId}}", method: "news.NewsService.GetMultipleNews")
  news__NewsService__GetNews(newsId: news__NewsId!): News! @grpc(body: "{{.args.newsId}}", method: "news.NewsService.GetNews")
}
