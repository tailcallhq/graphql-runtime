---
source: src/core/generator/from_proto.rs
expression: config
---
schema @server @upstream {
  query: Query
}

input google__protobuf__DurationInput @tag(id: "google.protobuf.Duration") {
  nanos: Int
  seconds: Int
}

input google__protobuf__Int32ValueInput @tag(id: "google.protobuf.Int32Value") {
  value: Int
}

input google__protobuf__StringValue @tag(id: "google.protobuf.StringValue") {
  value: String
}

input google__protobuf__TimestampInput @tag(id: "google.protobuf.Timestamp") {
  nanos: Int
  seconds: Int
}

input movies__MovieInput @tag(id: "movies.Movie") {
  cast: [String]!
  duration: google__protobuf__DurationInput
  genre: movies__GenreInput
  name: String
  rating: Float
  subMovie: movies__Movie__SubMovieInput
  time: google__protobuf__TimestampInput
  year: google__protobuf__Int32ValueInput
}

input movies__MovieRequest @tag(id: "movies.MovieRequest") {
  movie: movies__MovieInput
}

input movies__Movie__SubMovieInput @tag(id: "movies.Movie.SubMovie") {
  format: movies__Movie__MovieFormatInput
  subRating: Float
}

input movies__SearchByCastRequest @tag(id: "movies.SearchByCastRequest") {
  castName: google__protobuf__StringValue
}

"""
This is a comment for Genre enum
"""
enum movies__Genre {
  ""
  This is a comment for DRAMA variant
  ""
  DRAMA
  ""
  This is a comment for UNSPECIFIED variant
  ""
  UNSPECIFIED
  ACTION
}

enum movies__Movie__MovieFormat {
  IMAX
}

type Query {
  """
  get all movies
  """
  movies__AnotherExample__GetMovies(movieRequest: movies__MovieRequest!): movies__MoviesResult! @grpc(body: "{{.args.movieRequest}}", method: "movies.AnotherExample.GetMovies")
  """
  search movies by the name of the cast
  """
  movies__AnotherExample__SearchMoviesByCast(searchByCastRequest: movies__SearchByCastRequest!): movies__Movie! @grpc(body: "{{.args.searchByCastRequest}}", method: "movies.AnotherExample.SearchMoviesByCast")
  """
  get all movies
  """
  movies__Example__GetMovies(movieRequest: movies__MovieRequest!): movies__MoviesResult! @grpc(body: "{{.args.movieRequest}}", method: "movies.Example.GetMovies")
  """
  search movies by the name of the cast
  """
  movies__Example__SearchMoviesByCast(searchByCastRequest: movies__SearchByCastRequest!): movies__Movie! @grpc(body: "{{.args.searchByCastRequest}}", method: "movies.Example.SearchMoviesByCast")
}

type google__protobuf__Duration @tag(id: "google.protobuf.Duration") {
  """
  Signed fractions of a second at nanosecond resolution of the span
  of time. Durations less than one second are represented with a 0
  `seconds` field and a positive or negative `nanos` field. For durations
  of one second or more, a non-zero value for the `nanos` field must be
  of the same sign as the `seconds` field. Must be from -999,999,999
  to +999,999,999 inclusive.
  """
  nanos: Int
  """
  Signed seconds of the span of time. Must be from -315,576,000,000
  to +315,576,000,000 inclusive. Note: these bounds are computed from:
  60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
  """
  seconds: Int
}

type google__protobuf__Int32Value @tag(id: "google.protobuf.Int32Value") {
  """
  The int32 value.
  """
  value: Int
}

type google__protobuf__Timestamp @tag(id: "google.protobuf.Timestamp") {
  """
  Non-negative fractions of a second at nanosecond resolution. Negative
  second values with fractions must still have non-negative nanos values
  that count forward in time. Must be from 0 to 999,999,999
  inclusive.
  """
  nanos: Int
  """
  Represents seconds of UTC time since Unix epoch
  1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  9999-12-31T23:59:59Z inclusive.
  """
  seconds: Int
}

type movies__Movie @tag(id: "movies.Movie") {
  """
  list of cast
  """
  cast: [String]!
  duration: google__protobuf__Duration
  genre: movies__Genre
  name: String
  rating: Float
  """
  SubMovie reference
  """
  subMovie: movies__Movie__SubMovie
  time: google__protobuf__Timestamp
  year: google__protobuf__Int32Value
}

type movies__Movie__SubMovie @tag(id: "movies.Movie.SubMovie") {
  """
  This is a comment for movie format in submovie
  """
  format: movies__Movie__MovieFormat
  """
  This is a comment for sub_rating
  """
  subRating: Float
}

type movies__MoviesResult @tag(id: "movies.MoviesResult") {
  """
  list of movies
  """
  result: [movies__Movie]!
}
