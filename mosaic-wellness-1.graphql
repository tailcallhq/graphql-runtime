schema @server(baseURL: "https://stg.api.mosaicwellness.in") {
  query: Query
  mutation: Mutation
}
input TreatmentPlanInput {
  patientId: Int!
  planKey: String!
  pdfBucket: String!
  appointmentId: Int!
  observations: ObservationInput!
}
input ObservationInput {
  doctorNotes: NotesInput!
  diagnosis: NotesInput!
  suggestProcedure: NotesInput!
  otherDetails: NotesInput!
  allergyIsEntering: String!
  suggestDiagnostics: NotesInput!
  lifestyleExisting: LifeStyleExistingInput!
  lifestyle: NotesInput!
  concerns: [ConcernsInput!]
  specialConsult: NotesInput!
  medicalHistory: NotesInput!
  familyHistory: NotesInput!
  allergySpecifications: [NotesInput!]
  pastTreatments: NotesInput!
}

input ConcernsInput {
  text: String!
  pretext: [String!]
  metadata: ConcernMetaDataInput!
}

input ConcernMetaDataInput {
  category: String!
  severity: String!
  onSet: String!
}

input LifeStyleExistingInput {
  metadata: LifestyleTraitsInput!
  pretext: [String!]
}
input LifestyleTraitsInput {
  habits: [String!]
  diet: String!
  sleep: String!
  stress: String!
  exercise: String!
}

input NotesInput {
  text: String!
  pretext: [String!]
  metadata: String!
}

input adminKeyInput {
  admin_key: String @modify(rename: "adminKey")
}

input DoctorInfoInput {
  doctor_id: String! @modify(rename: "doctorId")
}

input PatientProfileInput {
  alt_phone: [String!] @modify(rename: "altPhone")
  weight: Int!
  email: String!
  alt_email: [String!] @modify(rename: "altEmail")
  id: Int!
  doctor_name: String! @modify(rename: "doctorName")
  address: String!
  patient_medical_history: String! @modify(rename: "patientMedicalHistory")
  doctor_id: Int! @modify(rename: "doctorId")
  name: String!
  marital_status: String! @modify(rename: "maritalStatus")
  last_doctor: Int! @modify(rename: "lastDoctor")
  age: String!
  brand: String!
  user_id: String! @modify(rename: "userId")
  phone: String!
  gender: String!
}

input PrescriptionInput {
  doctorId: String!
  form: String!
  id: String!
  brand: String!
}

input PrescriptionProductsInput {
  appointmentId: String!
  source: String!
  brand: String!
}

input AppointmentInfoInput {
  brand: String!
  doctorId: String!
  email: String!
}

input SendPrescriptionInput {
  category: String!
  doctor_hash: String! @modify(rename: "doctorHash")
  id: String!
}

input PrescriptionQuickViewInput {
  appointmentId: String!
  brand: String!
  doctorId: String!
  email: String!
}

input DoctorSearchInput {
  categories: [String!]
  brand: String!
}

input prescribedProductInput {
  appointmentId: String!
}

input Type_81 {
  slots_available: String! @modify(rename: "slotsAvailable")
}

input AppointmentBookingInput {
  date_range: [String!] @modify(rename: "dateRange")
  source: String!
  slot_time_period: Int! @modify(rename: "slotTimePeriod")
  brand: String!
  slot_length: Int! @modify(rename: "slotLength")
  language: String!
  patient_name: String! @modify(rename: "patientName")
  grouping_length: Int! @modify(rename: "groupingLength")
  phone: String!
  email: String!
  doctorID: Int!
  source_id: Int! @modify(rename: "sourceId")
  category: [String!]
  app: Int!
}

input PrescriptionsInput {
  email: String
  brand: String
  doctorId: String
}

input UpdatePatientInput {
  brand: String!
  age: Int!
}

input RecommendedProductsInput {
  conditions: [ConditionsInput!]
  diagnosis: Int!
  products: [ProductsInput!]
  age: Int!
  brand: String!
}

input ConditionsInput {
  condition_type: String! @modify(rename: "conditionType")
  condition_preset: String! @modify(rename: "conditionPreset")
}

input ProductsInput {
  product_id: String! @modify(rename: "productId")
  duration: Int!
  improvement: Boolean!
}
input AddPatientInput {
  name: String!
  dateOfBirth: String!
  gender: String!
  imageBucket: String!
  imageFile: String!
  smoking: Boolean!
  age: String!
  weight: String!
  maritalStatus: String!
  sleepingHabits: [String]!
}

type Mutation {
  # Add a new patient
  addPatient(value: AddPatientInput!): AddPatientResponse!
  @steps(value: [{ http: { path: "/health-service/entity/patient", method: "POST", body: "{{args.value}}" } }])
  # Search for a Doctor
  doctorsByCategory(value: DoctorSearchInput!): DoctorByCategoryResponse!
  @steps(value: [{ http: { path: "/event-scheduler/core/reports/getDoctorsByCategory", method: "POST", body: "{{args.value}}" } }])
  # update a patient
  updatePatient(value: UpdatePatientInput!): UpdatePatientResponse!
  @steps(value: [{ http: { path: "/portal/consult/patient/update", method: "POST", body: "{{args.value}}" } }])
  # Get prescribed products
  prescribedProduct(value: prescribedProductInput!): PrescribedProductResponse!
  @steps(value: [{ http: { path: "/prescription-generator/getPrescribedProducts", method: "POST", body: "{{args.value}}" } }])
  eventInformation(value: AppointmentInfoInput!): MedicalAppointmentResponse!
  @steps(
    value: [
      {
        http: {
          path: "/prescription-generator/eventInformation"
          method: "POST"
          body: "{{args.value}}"
          output: {
            type: "object"
            fields: {
              statusCode: { type: "Integer" }
              headers: { type: "dict", value: { type: "String" } }
              body: {
                type: "object"
                fields: {
                  data: {
                    type: "array"
                    item: {
                      type: "object"
                      fields: {
                        prescription_id: { type: "optional", schema: { type: "Integer" } }
                        diagnosis: {
                          type: "optional"
                          schema: {
                            type: "array"
                            item: {
                              type: "object"
                              fields: {
                                metadata: { type: "object", fields: { type: { type: "String" } } }
                                text: { type: "String" }
                                pretext: { type: "array", item: { type: "String" } }
                              }
                            }
                          }
                        }
                        history: {
                          type: "optional"
                          schema: {
                            type: "object"
                            fields: {
                              metadata: { type: "object", fields: { isEntering: { type: "String" } } }
                              text: { type: "String" }
                              pretext: { type: "array", item: { type: "String" } }
                            }
                          }
                        }
                        email: { type: "String" }
                        appointment_schedule: { type: "String" }
                        complaints: {
                          type: "optional"
                          schema: {
                            type: "array"
                            item: {
                              type: "object"
                              fields: {
                                metadata: {
                                  type: "object"
                                  fields: { category: { type: "String" }, severity: { type: "String" }, onSet: { type: "String" } }
                                }
                                text: { type: "String" }
                                pretext: { type: "array", item: { type: "String" } }
                              }
                            }
                          }
                        }
                        event_type: { type: "String" }
                        created_dttm: { type: "String" }
                        type: { type: "optional", schema: { type: "String" } }
                        doctor_assigned: { type: "String" }
                        doctor_schedule_id: { type: "Integer" }
                        hideFromCustomer: { type: "optional", schema: { type: "Boolean" } }
                        eventId: { type: "String" }
                        prescription_metadata: {
                          type: "optional"
                          schema: {
                            type: "object"
                            fields: {
                              allPrescribedProducts: { type: "String" }
                              doctor: { type: "String" }
                              allPrescribedQuantity: { type: "String" }
                              coupon_code: { type: "String" }
                              expiry: { type: "Integer" }
                              schedule_token: { type: "String" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  )
  doctorInfo(value: DoctorInfoInput!): Doctor!
  @steps(value: [{ http: { path: "/prescription-generator/getDoctorInfo", method: "POST", body: "{{args.value}}" } }])
  prescriptionProducts(value: PrescriptionProductsInput!): PrescribedProducts!
  @steps(value: [{ http: { path: "/prescription-generator/getPrescriptionProducts", method: "POST", body: "{{args.value}}" } }])
  prescriptionQuickView(value: PrescriptionQuickViewInput!): PrescriptionQuickView!
  @steps(value: [{ http: { path: "/prescription-generator/quickView", method: "POST", body: "{{args.value}}" } }])
  slotsAvailable(value: AppointmentBookingInput!): SlotsAvailable!
  @steps(value: [{ http: { path: "/event-scheduler/core/doctor/slots", method: "POST", body: "{{args.value}}" } }])
  prescription(value: PrescriptionInput!): Prescription!
  @steps(value: [{ http: { path: "/prescription-generator/prescription", method: "POST", body: "{{args.value}}" } }])
  doctorDetails(value: adminKeyInput!): DoctorDetails!
  @steps(value: [{ http: { path: "/appointment-scheduler/reports/getDoctor", method: "POST", body: "{{args.value}}" } }])
  sendPrescription(value: SendPrescriptionInput!): SendPrescriptionResponse!
  @steps(value: [{ http: { path: "/prescription-generator/send", method: "POST", body: "{{args.value}}" } }])
  editProfile(value: PatientProfileInput!): UpdateProfileResponse!
  @steps(value: [{ http: { path: "/prescription-generator/editProfile", method: "POST", body: "{{args.value}}" } }])
  recommendedProducts(value: RecommendedProductsInput!): ProductRecommendation!
  @steps(value: [{ http: { path: "/prescription-generator/getRecommendedProduct", method: "POST", body: "{{args.value}}" } }])
  createOrUpdateTreatmentPlan(value: TreatmentPlanInput!): OperationStatus!
  @steps(value: [{ http: { path: "/entity/health-service/treatment-plan/5953", method: "POST", body: "{{args.value}}" } }])
  prescriptions(value: PrescriptionsInput!): PrescriptionGenerationResponse!
  @steps(
    value: [
      {
        http: {
          path: "/prescription-generator/get_rx_timeline_images"
          method: "POST"
          body: "{{args.value}}"
          output: {
            type: "object"
            fields: {
              statusCode: { type: "Integer" }
              headers: { type: "dict", value: { type: "String" } }
              body: { type: "object", fields: { result: { type: "String" } } }
              signedImages: { type: "dict", value: { type: "array", item: { type: "String" } } }
            }
          }
        }
      }
    ]
  )
}

type AddPatientResponse {
  statusCode: Int
  message: String
  data: PatientAddOperation
}
type PatientAddOperation {
  operation: String!
  primaryId: Int! @modify(rename: "id")
}
type SlotsAvailable {
  slots_available: String! @modify(rename: "slotsAvailable")
}

type DoctorObservationsResponse {
  success: Boolean!
  data: [DoctorObservation!]!
}

type Query {
  doctorObservations: DoctorObservationsResponse! @steps(value: [{ http: { path: "/prescription-generator/getPresetData" } }])
  health: Health! @steps(value: [{ http: { path: "/health-service/health" } }])
  # Get a patient by id
  patientDetails(id: Int!): PatientDetails! @steps(value: [{ http: { path: "/health-service/entity/patient/{{args.id}}" } }])
  treatmentPlan(id: Int!): TreatmentPlan!
  @steps(
    value: [
      {
        http: {
          path: "/entity/health-service/treatment-plan/{{args.id}}"
          output: {
            type : "object",
            fields : {
              statusCode : {
                type : "Integer"},
              message : {
                type : "String"},
              data : {
                type : "array",
                item : {
                  type : "object",
                  fields : {
                    cartLink : {
                      type : "String"},
                    updatedAt : {
                      type : "String"},
                    patientId : {
                      type : "Integer"},
                    planKey : {
                      type : "String"},
                    products : {
                      type : "array",
                      item : {
                        type : "object",
                        fields : {
                          prescription_id : {
                            type : "Integer"},
                          instruction : {
                            type : "String"},
                          cart_quantity : {
                            type : "Integer"},
                          product_name : {
                            type : "String"},
                          quantity : {
                            type : "Integer"},
                          order_id : {
                            type : "String"},
                          noOfDays : {
                            type : "String"},
                          product_id : {
                            type : "Integer"},
                          frequency : {
                            type : "String"},
                          unit : {
                            type : "array",
                            item : {
                              type : "String"}
                          }
                        }
                      }
                    },
                    pdfBucket : {
                      type : "String"},
                    id : {
                      type : "Integer"},
                    invalidated : {
                      type : "Integer"},
                    appointmentId : {
                      type : "Integer"},
                    sent : {
                      type : "String"},
                    messageSentTo : {
                      type : "String"},
                    treatmentPlanId : {
                      type : "Integer"},
                    createdAt : {
                      type : "String"},
                    mailSentTo : {
                      type : "String"},
                    observations : {
                      type : "object",
                      fields : {
                        doctorNotes : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            },
                            metadata : {
                              type : "object",
                              fields : {
                                doctorName : {
                                  type : "String"}
                              }
                            }
                          }
                        },
                        diagnosis : {
                          type : "dict",
                          value : {
                            type : "optional",
                            schema : {
                              type : "object",
                              fields : {
                                text : {
                                  type : "String"},
                                pretext : {
                                  type : "array",
                                  item : {
                                    type : "Integer"}
                                },
                                metadata : {
                                  type : "object",
                                  fields : {
                                    type : {
                                      type : "String"}
                                  }
                                }
                              }
                            }
                          }
                        },
                        suggestProcedure : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            }
                          }
                        },
                        otherDetails : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            },
                            metadata : {
                              type : "object",
                              fields : {
                                isEntering : {
                                  type : "String"}
                              }
                            }
                          }
                        },
                        allergyIsEntering : {
                          type : "String"},
                        suggestDiagnostics : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            }
                          }
                        },
                        lifestyleExisting : {
                          type : "object",
                          fields : {
                            metadata : {
                              type : "object",
                              fields : {
                                habits : {
                                  type : "array",
                                  item : {
                                    type : "String"}
                                },
                                diet : {
                                  type : "String"},
                                sleep : {
                                  type : "String"},
                                stress : {
                                  type : "String"},
                                exercise : {
                                  type : "String"}
                              }
                            },
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            }
                          }
                        },
                        lifestyle : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            }
                          }
                        },
                        concerns : {
                          type : "array",
                          item : {
                            type : "object",
                            fields : {
                              text : {
                                type : "String"},
                              pretext : {
                                type : "array",
                                item : {
                                  type : "String"}
                              },
                              metadata : {
                                type : "object",
                                fields : {
                                  category : {
                                    type : "String"},
                                  severity : {
                                    type : "String"},
                                  onSet : {
                                    type : "String"}
                                }
                              },
                              metData : {
                                type : "object",
                                fields : {
                                  category : {
                                    type : "String"},
                                  severity : {
                                    type : "String"},
                                  onSet : {
                                    type : "String"}
                                }
                              }
                            }
                          }
                        },
                        specialConsult : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            }
                          }
                        },
                        medicalHistory : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            },
                            metadata : {
                              type : "object",
                              fields : {
                                isEntering : {
                                  type : "String"}
                              }
                            }
                          }
                        },
                        familyHistory : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            },
                            metadata : {
                              type : "object",
                              fields : {
                                isEntering : {
                                  type : "String"}
                              }
                            }
                          }
                        },
                        allergySpecifications : {
                          type : "array",
                          item : {
                            type : "object",
                            fields : {
                              text : {
                                type : "String"},
                              pretext : {
                                type : "array",
                                item : {
                                  type : "String"}
                              },
                              metadata : {
                                type : "object",
                                fields : {
                                  type : {
                                    type : "String"}
                                }
                              }
                            }
                          }
                        },
                        pastTreatments : {
                          type : "object",
                          fields : {
                            text : {
                              type : "String"},
                            pretext : {
                              type : "array",
                              item : {
                                type : "String"}
                            },
                            metadata : {
                              type : "object",
                              fields : {
                                isEntering : {
                                  type : "String"}
                              }
                            }
                          }
                        }
                      }
                    },
                    patientData : {
                      type : "object",
                      fields : {
                        weight : {
                          type : "Integer"},
                        name : {
                          type : "String"},
                        email : {
                          type : "String"},
                        age : {
                          type : "Integer"},
                        phone : {
                          type : "String"},
                        gender : {
                          type : "String"}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  )
}

type OperationStatus {
  statusCode: Int!
  message: String!
  data: Operation!
}

type UpdatePatientResponse {
  errorCode: Int! @modify(rename: "statusCode")
  isError: Boolean!
  status: Boolean! @modify(rename: "success")
  message: String!
  data: UpdatePatientData!
}
type UpdatePatientData {
  response: Operation!
}
type Diagnosis {
  key: String!
  value: AllergySpecificationsNotes
}
type Observation {
  doctorNotes: DoctorNotes!
  diagnosis: [Diagnosis]!
  @step(value: [{ transform: { applySpec: {}  } }, { transform: { toKeyValue: {} } }])
  suggestProcedure: Notes!
  otherDetails: PastTreatmentsNotes!
  allergyIsEntering: String!
  suggestDiagnostics: Notes!
  lifestyleExisting: LifeStyleExisting!
  lifestyle: Notes!
  concerns: [Concerns!]
  specialConsult: Notes!
  medicalHistory: PastTreatmentsNotes!
  familyHistory: PastTreatmentsNotes!
  allergySpecifications: [AllergySpecificationsNotes]!
  pastTreatments: PastTreatmentsNotes!
}
type AllergySpecificationsNotes {
  text: String!
  pretext: [String!]
  metadata: allergySpecificationsMetaData!
}
type allergySpecificationsMetaData {
  type: String!
}
type PastTreatmentsNotes {
  text: String!
  pretext: [String!]
  metadata: PastTreatmentsMetaData!
}
type PastTreatmentsMetaData {
  isEntering: String!
}
type LifeStyleExisting {
  metadata: LifestyleTraits!
  pretext: [String!]
}

type Concerns {
  text: String!
  pretext: [String!]
  metadata: ConcernMetaData!
  metData: ConcernMetaData!
}

type Health {
  status: String!
  mngDb: MngDBHealth!
  msqDb: MngDBHealth!
}
type MngDBHealth {
  ok: Int!
}

type Notes {
  text: String!
  pretext: [String!]
  metadata: String
}
type DoctorNotes {
  text: String!
  pretext: [String!]
  metadata: Metadata!
}
type Metadata {
  doctorName: String!
}
type LifestyleTraits {
  habits: [String!]
  diet: String!
  sleep: String!
  stress: String!
  exercise: String!
}

type ConcernMetaData {
  category: String!
  severity: String!
  onSet: String!
}

type TreatmentPlan {
  statusCode: Int!
  message: String!
  data: [TreatmentPlanData]!
}
type TreatmentPlanData {
  id: Int!
  patientId: Int!
  invalidated: Int!
  createdAt: String!
  updatedAt: String!
  appointmentId: Int!
  products: [OrderDetails!] @modify(rename: "orderDetails")
  pdfBucket: String!
  planKey: String!
  patientData: PatientData!
  observations: Observation!

  cartLink: String!

  sent: Boolean!
  messageSentTo: String!
  treatmentPlanId: Int!

  mailSentTo: String!
}

type OrderDetails {
  product_id: String! @modify(rename: "productId")
  product_name: String! @modify(rename: "productName")
  frequency: String!
  unit: [String]!
  instruction: String!
  noOfDays: String!
  quantity: Int!
  cart_quantity: Int! @modify(rename: "cartQuantity")
  order_id: String! @modify(rename: "orderId")
  prescription_id: Int! @modify(rename: "prescriptionId")
}

type PatientData {
  weight: Int!
  name: String!
  email: String!
  age: Int!
  phone: String!
  gender: String!
}
type DoctorDetailBody {
  result: String!
  data: DoctorDetailData!
}
type DoctorDetailData {
  rows: [DoctorDetailRows]!
}
type DoctorDetailRows {
  doctor_name: String @modify(rename: "doctorName")
  medical_id: String! @modify(rename: "medicalId")
  doctor_qualifications: String! @modify(rename: "doctorQualifications")
  gender: String!
  is_hc: Int! @modify(rename: "isHc")
  is_sh: Int! @modify(rename: "isSh")
  weight: Int!
  skin: Int!
  is_men: Int! @modify(rename: "isMen")
  is_women: Int! @modify(rename: "isWomen")
  doctor_email: String! @modify(rename: "doctorEmail")
  doctor_phone: String! @modify(rename: "doctorPhone")
  doctor_sign_key: String! @modify(rename: "doctorSignKey")
  doctor_id: Int! @modify(rename: "doctorId")
  active: Int!
  uti: Int!
  pcos: Int!
  beard: Int!
  doctor_img: String @modify(rename: "doctorImg")
  languages: String
  specialization: String!
  experience: String!
  description: String
  info_image: String @modify(rename: "infoImage")
  app: Int!
  web_app: Int! @modify(rename: "webApp")
  only_order: Int! @modify(rename: "onlyOrder")
  paid: Int!
  doctor_status: Int! @modify(rename: "doctorStatus")
  immediate: Int
  scheduled: Int
  standby: Int
  pending: Int
  image_url: String! @modify(rename: "imageUrl")
}
type DoctorDetails {
  statusCode: Int!
  body: DoctorDetailBody!
}

type DoctorResponse {
  success: Boolean!
  headers: [Header]
  data: [Doctor!]!
}
type Header {
  name: String!
  value: String!
}

type Doctor {
  doctor_phone: String! @modify(rename: "doctorPhone")
  doctor_id: Int! @modify(rename: "doctorId")
  doctor_name: String! @modify(rename: "doctorName")
}

type UpdateProfileResponse {
  success: Boolean!
  data: String!
}

type Prescription {
  source: String!
  product_items: [ProductItems!] @modify(rename: "productItems")
  products: [ProductOrder!]
  product_items_new: [ProductItems!]! @modify(rename: "productItemsNew")
  optional_rx: [String!] @modify(rename: "optionalRx")
  appointment_date: String! @modify(rename: "appointmentDate")
  status: String!
  appointment_slot: String! @modify(rename: "appointmentSlot")
  source_label: String! @modify(rename: "sourceLabel")
  app_installed: Boolean! @modify(rename: "appInstalled")
  schedule_token: String! @modify(rename: "scheduleToken")
  doctor_assigned: String! @modify(rename: "doctorAssigned")
  doctor_id: Int! @modify(rename: "doctorId")
  product_kits: [String!] @modify(rename: "productKits")
  phone: String!
  name: String!
  order_id: Int! @modify(rename: "orderId")
  email: String!
  product_kits_new: String! @modify(rename: "productKitsNew")
  rescheduled: Int!
  form_order_placed: Int! @modify(rename: "formOrderPlaced")
  brand: String!
  doctor_img: String! @modify(rename: "doctorImg")
  user_id: String! @modify(rename: "userId")
  prescription_order_ids: [String!] @modify(rename: "prescriptionOrderIds")
  language: String!
  source_id: String! @modify(rename: "sourceId")
  mode: String!
  category: String!
  app: Int!
  remarks: [Remarks!]
  category_label: String! @modify(rename: "categoryLabel")
  repeat: Int!
  newItems: [ProductItems!]!
  type: String!
}

type ProductItems {
  instruction: [String!]
  product_id: Int! @modify(rename: "productId")
  name: String!
  quantity: Int!
  frequency: [String!]
  unit: [String!]
}

type ProductOrder {
  id: Int!
  cart_quantity: Int! @modify(rename: "cartQuantity")
  isVirtual: Boolean!
}

type Operation {
  operation: String!
  id: String!
}

type Remarks {
  created_dttm: String! @modify(rename: "createdDttm")
  updated_dttm: String! @modify(rename: "updatedDttm")
  status: String!
  remarks: String!
}

type ProductItem {
  name: Int!
  product_id: Int! @modify(rename: "productId")
  quantity: Int!
}

type PrescribedProducts {
  recommendedProducts: [String!]
  orderedProducts: [ProductDetails!]
}

type ProductDetails {
  products: [Product!]
  allow_edit: Boolean! @modify(rename: "allowEdit")
}

type Product {
  product_id: Int! @modify(rename: "productId")
  quantity: Int!
  name: Int!
  isVirtual: Boolean!
}
type MedicalAppointmentResponse {
  statusCode: Int!
  headers: [Headers]! @step(value: [{ transform: { path: ["value", "headers"] } }, { transform: { toKeyValue: {} } }])
  body: MedicalAppointmentBody!
}
type MedicalAppointmentBody {
  data: [MedicalAppointment]!
}
type MedicalAppointment {
  prescription_id: Int @modify(rename: "prescriptionId")
  order_id: String @modify(rename: "orderId")
  diagnosis: [Notes]
  email: String!
  appointment_schedule: String @modify(rename: "appointmentSchedule")
  rescheduleBy: String
  complaints: [Compaints]
  order_status: String @modify(rename: "orderStatus")
  event_type: String! @modify(rename: "eventType")
  created_dttm: String! @modify(rename: "createdDttm")
  type: String
  doctor_assigned: String @modify(rename: "doctorAssigned")
  doctor_schedule_id: Int @modify(rename: "doctorScheduleId")
  hideFromCustomer: Boolean
  new_appointment: String @modify(rename: "newAppointment")
  history: Notes
  previous_appointment: String @modify(rename: "previousAppointment")
  eventId: String!
  prescription_metadata: PrescriptionMetaData @modify(rename: "prescriptionMetadata")
}

type Compaints {
  metadata: ConcernMetaData!
  text: String!
  pretext: [String!]
}

type PrescriptionMetaData {
  allPrescribedProducts: String!
  doctor: String!
  allPrescribedQuantity: String!
  coupon_code: String! @modify(rename: "couponCode")
  expiry: Int!
  schedule_token: String! @modify(rename: "scheduleToken")
}

type SendPrescriptionResponse {
  statusCode: Int!
  result: String!
}
type Patient {
  id: Int!
  name: String!
  dateOfBirth: String!
  gender: String!
  createdAt: String!
  updatedAt: String!
  patientId: Int!
  imageBucket: String!
  imageFile: String!
  smoking: Boolean!
  sleepingHabits: [String]!
  lastDoctor: String!
  age: String!
  weight: String!
  height: Int!
  diet: [String]
  exercise: [String]
  habit: [String]
  maritalStatus: String!
}
type PatientDetails {
  statusCode: Int!
  message: String!
  data: [Patient]!
}

type PrescriptionQuickView {
  diagnosis: String!
  history: String!
  lastAppointmentDate: String!
  doctors: Int!
  complaints: String!
  forms: Int!
  previousDoctor: String!
  lastRxId: Int!
  orders: Int!
  appointments: Int!
}

type DoctorByCategoryResponse {
  status: Boolean!
  message: String!
  data: DoctorsByCategory!
}
type DoctorsByCategory {
  doctorsByCategory: [DoctorSearchFilters]!
}

type DoctorSearchFilters {
  webApp: Int!
  doctorId: Int!
  immediate: Int
  languages: [String!]
  doctorName: String
  categories: [String!]
  brands: [String!]
  gender: String!
  onlyOrder: Int!
  paid: Int!
  app: Int!
  doctorPhone: String!
}

type DoctorObservation {
  observation_type: String! @modify(rename: "observationType")
  tag: String!
  brand: String!
  id: Int!
  created_at: String! @modify(rename: "createdAt")
  observation_preset_text: String! @modify(rename: "observationPresetText")
  updated_at: String! @modify(rename: "updatedAt")
}

type PrescribedProductResponse {
  success: Boolean!
  data: [PrescribedProduct]!
}
type PrescribedProduct {
  start_date: String! @modify(rename: "startDate")
  id: String!
  last_date_ordered: String! @modify(rename: "lastDateOrdered")
  name: String!
  quantity: String!
}

type PrescriptionGenerationResponse {
  statusCode: Int!
  headers: [Headers]! @step(value: [{ transform: { path: ["value", "headers"] } }, { transform: { toKeyValue: {} } }])
  body: MedicationResponse!
  signedImages: [SignedImages]! @step(value: [{ transform: { path: ["value", "signedImages"] } }, { transform: { toKeyValue: {} } }])
}
type Headers {
  key: String!
  value: String!
}

type MedicationResponse {
  result: String
}

type SignedImages {
  key: String!
  value: [String]!
}

type MedicationSet {
  key: String!
  value: Medication!
}

type Medication {
  name: String!
  hideInList: Boolean!
  usage_instructions: [String!] @modify(rename: "usageInstructions")
  is_kit: Boolean! @modify(rename: "isKit")
  usage_unit: [String!] @modify(rename: "usageUnit")
  category: String!
  prescription_quantity: Int! @modify(rename: "prescriptionQuantity")
  copied_sku: String! @modify(rename: "copiedSku")
  usage_frequency: [String!] @modify(rename: "usageFrequency")
  cart_quantity: Int! @modify(rename: "cartQuantity")
  visibility: Boolean!
  hide_on_rx: Int! @modify(rename: "hideOnRx")
}

type ProductRecommendation {
  recommendedProducts: [String!]
  restrictedProduct: [String!]
}
