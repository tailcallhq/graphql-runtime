#> server-sdl
schema @server @upstream(baseURL: "http://localhost:3000") {
  query: Query
}

type Query {
  posts: [Post] @http(path: "/posts")
  userWithoutResolver(id: Int!): User
  user(id: Int!): User @http(path: "/users/{{args.id}}")
  userWithGraphQLResolver(id: Int!): User
    @graphQL(name: "user", args: [{key: "id", value: "{{args.id}}"}])
}

type User {
  id: Int!
}

type Post {
  userId: Int!
  withoutResolver: User @call(query: "userWithoutResolver", args: {id: "{{value.userId}}"})
  multipleResolvers: User @http(path: "/users/{{value.userId}}") @call(query: "user", args: {id: "{{value.userId}}"})
  withoutOperator: User @call(args: {id: "{{value.userId}}"})
  argumentMismatchHttp: User @call(query: "user", args: {})
  # invalidResolver: User @call(query: "userWithGraphQLResolver", args: {id: "{{value.userId}}"})
}

#> client-sdl
type Failure @error(message: "No resolver has been found in the schema", trace: ["Query", "userWithoutResolver"])
type Failure @error(message: "no argument 'id' found", trace: ["Post", "argumentMismatchHttp", "@call", "@http", "path"])
type Failure
  @error(
    message: "@call directive is not allowed on field multipleResolvers because it already has a resolver"
    trace: ["Post", "multipleResolvers", "@call"]
  )
type Failure @error(message: "call must have query", trace: ["Post", "withoutOperator", "@call"])
type Failure @error(message: "userWithoutResolver field has no resolver", trace: ["Post", "withoutResolver", "@call"])
