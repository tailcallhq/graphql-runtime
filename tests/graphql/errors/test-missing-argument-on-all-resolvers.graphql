#> server-sdl
schema @upstream(baseURL: "http://jsonplaceholder.typicode.com") {
  query: Query
}

type Post {
  id: Int!
}

type News {
  body: String
  id: Int
  postImage: String
  title: String
}

type NewsData {
  news: [News]!
}

type Query {
  postGraphQLArgs: Post @graphQL(name: "post", args: [{key: "id", value: "{{args.id}}"}])
  postGraphQLHeaders: Post @graphQL(name: "post", headers: [{key: "id", value: "{{args.id}}"}])
  postHttp: Post @http(path: "/posts/{{args.id}}")
  newsGrpcHeaders: NewsData!
    @grpc(
      method: "GetAllNews"
      protoPath: "src/grpc/tests/news.proto"
      service: "news.NewsService"
      headers: [{key: "id", value: "{{args.id}}"}]
    )
  newsGrpcUrl: NewsData!
    @grpc(
      method: "GetAllNews"
      protoPath: "src/grpc/tests/news.proto"
      service: "news.NewsService"
      baseURL: "{{args.url}}"
    )
  newsGrpcBody: NewsData!
    @grpc(
      method: "GetAllNews"
      protoPath: "src/grpc/tests/news.proto"
      service: "news.NewsService"
      body: "{{args.id}}"
    )
}

type User {
  id: Int
  name: String
}

#> client-sdl
type Failure @error(message: "no argument 'id' found", trace: ["Query", "newsGrpcBody", "@grpc", "body"])
type Failure @error(message: "no argument 'id' found", trace: ["Query", "newsGrpcHeaders", "@grpc", "headers"])
type Failure @error(message: "no argument 'url' found", trace: ["Query", "newsGrpcUrl", "@grpc", "path"])
type Failure @error(message: "no argument 'id' found", trace: ["Query", "postGraphQLArgs", "@graphQL", "args"])
type Failure @error(message: "no argument 'id' found", trace: ["Query", "postGraphQLHeaders", "@graphQL", "headers"])
type Failure @error(message: "no argument 'id' found", trace: ["Query", "postHttp", "@http", "path"])
