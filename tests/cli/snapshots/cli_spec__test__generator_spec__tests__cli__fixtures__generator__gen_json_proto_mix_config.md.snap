---
source: tests/cli/gen.rs
expression: config.to_sdl()
---
schema @server @upstream(baseURL: "https://jsonplaceholder.typicode.com") {
  query: Query
}

input GEN__news__MultipleNewsId @addField(name: "ids", path: ["ids", "id"]) {
  ids: [Id]@omit 
}

input GEN__news__NewsInput {
  body: String
  id: Int
  postImage: String
  status: Status
  title: String
}

input Id {
  id: Int
}

enum Status {
  DELETED
  DRAFT
  PUBLISHED
}

type Address {
  city: String
  geo: Geo
  street: String
  suite: String
  zipcode: String
}

type Company {
  bs: String
  catchPhrase: String
  name: String
}

type GEN__news__NewsList {
  news: [News]
}

type Geo {
  lat: String
  lng: String
}

type News {
  body: String
  id: Int
  postImage: String
  status: Status
  title: String
}

type Query {
  GEN__news__NewsService__AddNews(news: GEN__news__NewsInput!): News @grpc(body: "{{.args.news}}", method: "news.NewsService.AddNews")
  GEN__news__NewsService__DeleteNews(newsId: Id!): Empty @grpc(body: "{{.args.newsId}}", method: "news.NewsService.DeleteNews")
  GEN__news__NewsService__EditNews(news: GEN__news__NewsInput!): News @grpc(body: "{{.args.news}}", method: "news.NewsService.EditNews")
  GEN__news__NewsService__GetAllNews: GEN__news__NewsList @grpc(method: "news.NewsService.GetAllNews")
  GEN__news__NewsService__GetMultipleNews(multipleNewsId: GEN__news__MultipleNewsId!): GEN__news__NewsList @grpc(body: "{{.args.multipleNewsId}}", method: "news.NewsService.GetMultipleNews")
  GEN__news__NewsService__GetNews(newsId: Id!): News @grpc(body: "{{.args.newsId}}", method: "news.NewsService.GetNews")
  users: [User] @http(path: "/users")
}

type User {
  address: Address
  company: Company
  email: String
  id: Int
  name: String
  phone: String
  username: String
  website: String
}
