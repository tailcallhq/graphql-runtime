---
source: tests/core/spec.rs
expression: response
---
{
  "status": 200,
  "headers": {
    "content-type": "application/json"
  },
  "body": {
    "data": {
      "_service": {
        "sdl": "schema @server(port: 8000) @upstream(baseURL: \"http://jsonplaceholder.typicode.com\", batch: {delay: 100, headers: []}, httpCache: 42) {\n  query: Query\n}\n\nscalar _Any\n\nunion _Entity = Post | User\n\ntype Post @graphQL(args: [{key: \"id\", value: \"{{.value.id}}\"}], baseURL: \"http://upstream/graphql\", batch: true, name: \"post\") @key(fields: \"id\") {\n  id: Int!\n  title: String!\n}\n\ntype Query {\n  \"\"\"\n  Apollo federation Query._entities resolver\n  \"\"\"\n  _entities(representations: [_Any!]!): [_Entity]!\n  \"\"\"\n  Apollo federation Query._service resolver\n  \"\"\"\n  _service: _Service!\n  user(id: Int!): User @http(path: \"/users/{{.args.id}}\")\n}\n\ntype User @http(batchKey: [\"id\"], path: \"/users\", query: [{key: \"id\", value: \"{{.value.user.id}}\"}]) @key(fields: \"user { id }\") {\n  id: Int!\n  name: String!\n}\n\ntype _Service {\n  sdl: String\n}\n\"\"\"\nThe @addField operator simplifies data structures and queries by adding a field that \ninlines or flattens a nested field or node within your schema. more info [here](https://tailcall.run/docs/guides/operators/#addfield)\n\"\"\"\ndirective @addField(\n  \"\"\"\n  Name of the new field to be added\n  \"\"\"\n  name: String!\n  \"\"\"\n  Path of the data where the field should point to\n  \"\"\"\n  path: [String!]\n) repeatable on OBJECT\n\n\"\"\"\nThe @alias directive indicates that aliases of one enum value.\n\"\"\"\ndirective @alias(\n  options: [String!]\n) on ENUM_VALUE\n\n\"\"\"\nThe @cache operator enables caching for the query, field or type it is applied to.\n\"\"\"\ndirective @cache(\n  \"\"\"\n  Specifies the duration, in milliseconds, of how long the value has to be stored in \n  the cache.\n  \"\"\"\n  maxAge: Int!\n) on OBJECT | FIELD_DEFINITION\n\n\"\"\"\nProvides the ability to refer to multiple fields in the Query or Mutation root.\n\"\"\"\ndirective @call(\n  \"\"\"\n  Steps are composed together to form a call. If you have multiple steps, the output \n  of the previous step is passed as input to the next step.\n  \"\"\"\n  steps: [Step]\n) on FIELD_DEFINITION | OBJECT\n\n\"\"\"\nThe `@expr` operators allows you to specify an expression that can evaluate to a \nvalue. The expression can be a static value or built form a Mustache template. schema.\n\"\"\"\ndirective @expr(\n  body: JSON\n) on FIELD_DEFINITION | OBJECT\n\n\"\"\"\nThe @graphQL operator allows to specify GraphQL API server request to fetch data \nfrom.\n\"\"\"\ndirective @graphQL(\n  \"\"\"\n  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)\n  \"\"\"\n  args: [KeyValue]\n  \"\"\"\n  This refers to the base URL of the API. If not specified, the default base URL is \n  the one specified in the `@upstream` operator.\n  \"\"\"\n  baseURL: String\n  \"\"\"\n  If the upstream GraphQL server supports request batching, you can specify the 'batch' \n  argument to batch several requests into a single batch request.Make sure you have \n  also specified batch settings to the `@upstream` and to the `@graphQL` operator.\n  \"\"\"\n  batch: Boolean!\n  \"\"\"\n  The headers parameter allows you to customize the headers of the GraphQL request \n  made by the `@graphQL` operator. It is used by specifying a key-value map of header \n  names and their values.\n  \"\"\"\n  headers: [KeyValue]\n  \"\"\"\n  Specifies the root field on the upstream to request data from. This maps a field \n  in your schema to a field in the upstream schema. When a query is received for this \n  field, Tailcall requests data from the corresponding upstream field.\n  \"\"\"\n  name: String!\n) on FIELD_DEFINITION | OBJECT\n\n\"\"\"\nThe @grpc operator indicates that a field or node is backed by a gRPC API.For instance, \nif you add the @grpc operator to the `users` field of the Query type with a service \nargument of `NewsService` and method argument of `GetAllNews`, it signifies that \nthe `users` field is backed by a gRPC API. The `service` argument specifies the name \nof the gRPC service. The `method` argument specifies the name of the gRPC method. \nIn this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint \nspecified when the `users` field is queried.\n\"\"\"\ndirective @grpc(\n  \"\"\"\n  This refers to the base URL of the API. If not specified, the default base URL is \n  the one specified in the `@upstream` operator.\n  \"\"\"\n  baseURL: String\n  \"\"\"\n  The `batchKey` dictates the path Tailcall will follow to group the returned items \n  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).\n  \"\"\"\n  batchKey: [String!]\n  \"\"\"\n  This refers to the arguments of your gRPC call. You can pass it as a static object \n  or use Mustache template for dynamic parameters. These parameters will be added in \n  the body in `protobuf` format.\n  \"\"\"\n  body: JSON\n  \"\"\"\n  The `headers` parameter allows you to customize the headers of the HTTP request made \n  by the `@grpc` operator. It is used by specifying a key-value map of header names \n  and their values. Note: content-type is automatically set to application/grpc\n  \"\"\"\n  headers: [KeyValue]\n  \"\"\"\n  This refers to the gRPC method you're going to call. For instance `GetAllNews`.\n  \"\"\"\n  method: String!\n) on FIELD_DEFINITION | OBJECT\n\n\"\"\"\nThe @http operator indicates that a field or node is backed by a REST API.For instance, \nif you add the @http operator to the `users` field of the Query type with a path \nargument of `\"/users\"`, it signifies that the `users` field is backed by a REST API. \nThe path argument specifies the path of the REST API. In this scenario, the GraphQL \nserver will make a GET request to the API endpoint specified when the `users` field \nis queried.\n\"\"\"\ndirective @http(\n  \"\"\"\n  This refers to the base URL of the API. If not specified, the default base URL is \n  the one specified in the `@upstream` operator.\n  \"\"\"\n  baseURL: String\n  \"\"\"\n  The `batchKey` dictates the path Tailcall will follow to group the returned items \n  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).\n  \"\"\"\n  batchKey: [String!]\n  \"\"\"\n  The body of the API call. It's used for methods like POST or PUT that send data to \n  the server. You can pass it as a static object or use a Mustache template to substitute \n  variables from the GraphQL variables.\n  \"\"\"\n  body: String\n  \"\"\"\n  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` \n  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.\n  \"\"\"\n  encoding: Encoding\n  \"\"\"\n  The `headers` parameter allows you to customize the headers of the HTTP request made \n  by the `@http` operator. It is used by specifying a key-value map of header names \n  and their values.\n  \"\"\"\n  headers: [KeyValue]\n  \"\"\"\n  Schema of the input of the API call. It is automatically inferred in most cases.\n  \"\"\"\n  input: Schema\n  \"\"\"\n  This refers to the HTTP method of the API call. Commonly used methods include `GET`, \n  `POST`, `PUT`, `DELETE` etc. @default `GET`.\n  \"\"\"\n  method: Method\n  \"\"\"\n  onRequest field in @http directive gives the ability to specify the request interception \n  handler.\n  \"\"\"\n  onRequest: String\n  \"\"\"\n  Schema of the output of the API call. It is automatically inferred in most cases.\n  \"\"\"\n  output: Schema\n  \"\"\"\n  This refers to the API endpoint you're going to call. For instance `https://jsonplaceholder.typicode.com/users`.For \n  dynamic segments in your API endpoint, use Mustache templates for variable substitution. \n  For instance, to fetch a specific user, use `/users/{{args.id}}`.\n  \"\"\"\n  path: String!\n  \"\"\"\n  This represents the query parameters of your API call. You can pass it as a static \n  object or use Mustache template for dynamic parameters. These parameters will be \n  added to the URL. NOTE: Query parameter order is critical for batching in Tailcall. \n  The first parameter referencing a field in the current value using mustache syntax \n  is automatically selected as the batching parameter.\n  \"\"\"\n  query: [URLQuery]\n) on FIELD_DEFINITION | OBJECT\n\ndirective @js(\n  name: String!\n) on FIELD_DEFINITION | OBJECT\n\ndirective @modify(\n  name: String\n  omit: Boolean\n) on FIELD_DEFINITION\n\n\"\"\"\nUsed to omit a field from public consumption.\n\"\"\"\ndirective @omit on FIELD_DEFINITION\n\ndirective @protected on OBJECT | FIELD_DEFINITION\n\n\"\"\"\nThe `@server` directive, when applied at the schema level, offers a comprehensive \nset of server configurations. It dictates how the server behaves and helps tune tailcall \nfor various use-cases.\n\"\"\"\ndirective @server(\n  \"\"\"\n  `apolloTracing` exposes GraphQL query performance data, including execution time \n  of queries and individual resolvers.\n  \"\"\"\n  apolloTracing: Boolean\n  \"\"\"\n  `batchRequests` combines multiple requests into one, improving performance but potentially \n  introducing latency and complicating debugging. Use judiciously. @default `false`.\n  \"\"\"\n  batchRequests: Boolean\n  \"\"\"\n  Enables deduplication of IO operations to enhance performance.This flag prevents \n  duplicate IO requests from being executed concurrently, reducing resource load. Caution: \n  May lead to issues with APIs that expect unique results for identical inputs, such \n  as nonce-based APIs.\n  \"\"\"\n  dedupe: Boolean\n  enableJIT: Boolean\n  \"\"\"\n  `globalResponseTimeout` sets the maximum query duration before termination, acting \n  as a safeguard against long-running queries.\n  \"\"\"\n  globalResponseTimeout: Int\n  \"\"\"\n  `headers` contains key-value pairs that are included as default headers in server \n  responses, allowing for consistent header management across all responses.\n  \"\"\"\n  headers: Headers\n  \"\"\"\n  `hostname` sets the server hostname.\n  \"\"\"\n  hostname: String\n  \"\"\"\n  `introspection` allows clients to fetch schema information directly, aiding tools \n  and applications in understanding available types, fields, and operations. @default \n  `true`.\n  \"\"\"\n  introspection: Boolean\n  \"\"\"\n  `pipelineFlush` allows to control flushing behavior of the server pipeline.\n  \"\"\"\n  pipelineFlush: Boolean\n  \"\"\"\n  `port` sets the Tailcall running port. @default `8000`.\n  \"\"\"\n  port: Int\n  \"\"\"\n  `queryValidation` checks incoming GraphQL queries against the schema, preventing \n  errors from invalid queries. Can be disabled for performance. @default `false`.\n  \"\"\"\n  queryValidation: Boolean\n  \"\"\"\n  `responseValidation` Tailcall automatically validates responses from upstream services \n  using inferred schema. @default `false`.\n  \"\"\"\n  responseValidation: Boolean\n  \"\"\"\n  `routes` allows customization of server endpoint paths. It provides options to change \n  the default paths for status and GraphQL endpoints. Default values are: - status: \n  \"/status\" - graphQL: \"/graphql\" If not specified, these default values will be used.\n  \"\"\"\n  routes: Routes\n  \"\"\"\n  A link to an external JS file that listens on every HTTP request response event.\n  \"\"\"\n  script: ScriptOptions\n  \"\"\"\n  `showcase` enables the /showcase/graphql endpoint.\n  \"\"\"\n  showcase: Boolean\n  \"\"\"\n  This configuration defines local variables for server operations. Useful for storing \n  constant configurations, secrets, or shared information.\n  \"\"\"\n  vars: [KeyValue]\n  \"\"\"\n  `version` sets the HTTP version for the server. Options are `HTTP1` and `HTTP2`. \n  @default `HTTP1`.\n  \"\"\"\n  version: HttpVersion\n  \"\"\"\n  `workers` sets the number of worker threads. @default the number of system cores.\n  \"\"\"\n  workers: Int\n) on SCHEMA\n\n\"\"\"\nThe @telemetry directive facilitates seamless integration with OpenTelemetry, enhancing \nthe observability of your GraphQL services powered by Tailcall.  By leveraging this \ndirective, developers gain access to valuable insights into the performance and behavior \nof their applications.\n\"\"\"\ndirective @telemetry(\n  export: TelemetryExporter\n  \"\"\"\n  The list of headers that will be sent as additional attributes to telemetry exporters \n  Be careful about **leaking sensitive information** from requests when enabling the \n  headers that may contain sensitive data\n  \"\"\"\n  requestHeaders: [String!]\n) on SCHEMA\n\n\"\"\"\nThe `upstream` directive allows you to control various aspects of the upstream server \nconnection. This includes settings like connection timeouts, keep-alive intervals, \nand more. If not specified, default values are used.\n\"\"\"\ndirective @upstream(\n  \"\"\"\n  `allowedHeaders` defines the HTTP headers allowed to be forwarded to upstream services. \n  If not set, no headers are forwarded, enhancing security but possibly limiting data \n  flow.\n  \"\"\"\n  allowedHeaders: [String!]\n  \"\"\"\n  This refers to the default base URL for your APIs. If it's not explicitly mentioned \n  in the `@upstream` operator, then each [@http](#http) operator must specify its own \n  `baseURL`. If neither `@upstream` nor [@http](#http) provides a `baseURL`, it results \n  in a compilation error.\n  \"\"\"\n  baseURL: String\n  \"\"\"\n  An object that specifies the batch settings, including `maxSize` (the maximum size \n  of the batch), `delay` (the delay in milliseconds between each batch), and `headers` \n  (an array of HTTP headers to be included in the batch).\n  \"\"\"\n  batch: Batch\n  \"\"\"\n  The time in seconds that the connection will wait for a response before timing out.\n  \"\"\"\n  connectTimeout: Int\n  \"\"\"\n  The `http2Only` setting allows you to specify whether the client should always issue \n  HTTP2 requests, without checking if the server supports it or not. By default it \n  is set to `false` for all HTTP requests made by the server, but is automatically \n  set to true for GRPC.\n  \"\"\"\n  http2Only: Boolean\n  \"\"\"\n  Providing httpCache size enables Tailcall's HTTP caching, adhering to the [HTTP Caching \n  RFC](https://tools.ietf.org/html/rfc7234), to enhance performance by minimizing redundant \n  data fetches. Defaults to `0` if unspecified.\n  \"\"\"\n  httpCache: Int\n  \"\"\"\n  The time in seconds between each keep-alive message sent to maintain the connection.\n  \"\"\"\n  keepAliveInterval: Int\n  \"\"\"\n  The time in seconds that the connection will wait for a keep-alive message before \n  closing.\n  \"\"\"\n  keepAliveTimeout: Int\n  \"\"\"\n  A boolean value that determines whether keep-alive messages should be sent while \n  the connection is idle.\n  \"\"\"\n  keepAliveWhileIdle: Boolean\n  \"\"\"\n  onRequest field gives the ability to specify the global request interception handler.\n  \"\"\"\n  onRequest: String\n  \"\"\"\n  The time in seconds that the connection pool will wait before closing idle connections.\n  \"\"\"\n  poolIdleTimeout: Int\n  \"\"\"\n  The maximum number of idle connections that will be maintained per host.\n  \"\"\"\n  poolMaxIdlePerHost: Int\n  \"\"\"\n  The `proxy` setting defines an intermediary server through which the upstream requests \n  will be routed before reaching their intended endpoint. By specifying a proxy URL, \n  you introduce an additional layer, enabling custom routing and security policies.\n  \"\"\"\n  proxy: Proxy\n  \"\"\"\n  The time in seconds between each TCP keep-alive message sent to maintain the connection.\n  \"\"\"\n  tcpKeepAlive: Int\n  \"\"\"\n  The maximum time in seconds that the connection will wait for a response.\n  \"\"\"\n  timeout: Int\n  \"\"\"\n  The User-Agent header value to be used in HTTP requests. @default `Tailcall/1.0`\n  \"\"\"\n  userAgent: String\n) on SCHEMA\n\n\"\"\"\nField whose value is a sequence of bytes.\n\"\"\"\nscalar Bytes\n\n\"\"\"\nField whose value conforms to the standard date format as specified in RFC 3339 (https://datatracker.ietf.org/doc/html/rfc3339).\n\"\"\"\nscalar Date\n\n\"\"\"\nField whose value conforms to the standard internet email address format as specified \nin HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.\n\"\"\"\nscalar Email\n\n\"\"\"\nEmpty scalar type represents an empty value.\n\"\"\"\nscalar Empty\n\n\"\"\"\nField whose value is a 128-bit signed integer.\n\"\"\"\nscalar Int128\n\n\"\"\"\nField whose value is a 16-bit signed integer.\n\"\"\"\nscalar Int16\n\n\"\"\"\nField whose value is a 32-bit signed integer.\n\"\"\"\nscalar Int32\n\n\"\"\"\nField whose value is a 64-bit signed integer.\n\"\"\"\nscalar Int64\n\n\"\"\"\nField whose value is an 8-bit signed integer.\n\"\"\"\nscalar Int8\n\n\"\"\"\nField whose value conforms to the standard JSON format as specified in RFC 8259 (https://datatracker.ietf.org/doc/html/rfc8259).\n\"\"\"\nscalar JSON\n\n\"\"\"\nField whose value conforms to the standard E.164 format as specified in E.164 specification \n(https://en.wikipedia.org/wiki/E.164).\n\"\"\"\nscalar PhoneNumber\n\n\"\"\"\nField whose value is a 128-bit unsigned integer.\n\"\"\"\nscalar UInt128\n\n\"\"\"\nField whose value is a 16-bit unsigned integer.\n\"\"\"\nscalar UInt16\n\n\"\"\"\nField whose value is a 32-bit unsigned integer.\n\"\"\"\nscalar UInt32\n\n\"\"\"\nField whose value is a 64-bit unsigned integer.\n\"\"\"\nscalar UInt64\n\n\"\"\"\nField whose value is an 8-bit unsigned integer.\n\"\"\"\nscalar UInt8\n\n\"\"\"\nField whose value conforms to the standard URL format as specified in RFC 3986 (https://datatracker.ietf.org/doc/html/rfc3986).\n\"\"\"\nscalar Url\n\n\"\"\"\nProvides the ability to refer to a field defined in the root Query or Mutation.\n\"\"\"\ninput Step {\n  \"\"\"\n  The arguments that will override the actual arguments of the field.\n  \"\"\"\n  args: JSON\n  \"\"\"\n  The name of the field on the `Mutation` type that you want to call.\n  \"\"\"\n  mutation: String\n  \"\"\"\n  The name of the field on the `Query` type that you want to call.\n  \"\"\"\n  query: String\n}\n\ninput KeyValue {\n  key: String!\n  value: String!\n}\n\n\"\"\"\nThe URLQuery input type represents a query parameter to be included in a URL.\n\"\"\"\ninput URLQuery {\n  \"\"\"\n  The key or name of the query parameter.\n  \"\"\"\n  key: String!\n  \"\"\"\n  Determines whether to ignore query parameters with empty values.\n  \"\"\"\n  skipEmpty: Boolean\n  \"\"\"\n  The actual value or a mustache template to resolve the value dynamically for the \n  query parameter.\n  \"\"\"\n  value: String!\n}\n\ninput Schema {\n  Obj: JSON\n  Arr: Schema\n  Opt: Schema\n  Enum: [String!]\n}\n\n\"\"\"\nType to configure Cross-Origin Resource Sharing (CORS) for a server.\n\"\"\"\ninput Cors {\n  \"\"\"\n  Indicates whether the server allows credentials (e.g., cookies, authorization headers) \n  to be sent in cross-origin requests.\n  \"\"\"\n  allowCredentials: Boolean\n  \"\"\"\n  A list of allowed headers in cross-origin requests. This can be used to specify custom \n  headers that are allowed to be included in cross-origin requests.\n  \"\"\"\n  allowHeaders: [String!]\n  \"\"\"\n  A list of allowed HTTP methods in cross-origin requests. These methods specify the \n  actions that are permitted in cross-origin requests.\n  \"\"\"\n  allowMethods: [Method]\n  \"\"\"\n  A list of origins that are allowed to access the server's resources in cross-origin \n  requests. An origin can be a domain, a subdomain, or even 'null' for local file schemes.\n  \"\"\"\n  allowOrigins: [String!]\n  \"\"\"\n  Indicates whether requests from private network addresses are allowed in cross-origin \n  requests. Private network addresses typically include IP addresses reserved for internal \n  networks.\n  \"\"\"\n  allowPrivateNetwork: Boolean\n  \"\"\"\n  A list of headers that the server exposes to the browser in cross-origin responses. \n  Exposing certain headers allows the client-side code to access them in the response.\n  \"\"\"\n  exposeHeaders: [String!]\n  \"\"\"\n  The maximum time (in seconds) that the client should cache preflight OPTIONS requests \n  in order to avoid sending excessive requests to the server.\n  \"\"\"\n  maxAge: Int\n  \"\"\"\n  A list of header names that indicate the values of which might cause the server's \n  response to vary, potentially affecting caching.\n  \"\"\"\n  vary: [String!]\n}\n\ninput Headers {\n  \"\"\"\n  `cacheControl` sends `Cache-Control` headers in responses when activated. The `max-age` \n  value is the least of the values received from upstream services. @default `false`.\n  \"\"\"\n  cacheControl: Boolean\n  \"\"\"\n  `cors` allows Cross-Origin Resource Sharing (CORS) for a server.\n  \"\"\"\n  cors: Cors\n  \"\"\"\n  `headers` are key-value pairs included in every server response. Useful for setting \n  headers like `Access-Control-Allow-Origin` for cross-origin requests or additional \n  headers for downstream services.\n  \"\"\"\n  custom: [KeyValue]\n  \"\"\"\n  `experimental` allows the use of `X-*` experimental headers in the response. @default \n  `[]`.\n  \"\"\"\n  experimental: [String!]\n  \"\"\"\n  `setCookies` when enabled stores `set-cookie` headers and all the response will be \n  sent with the headers.\n  \"\"\"\n  setCookies: Boolean\n}\n\ninput Routes {\n  graphQL: String!\n  status: String!\n}\n\ninput ScriptOptions {\n  timeout: Int\n}\n\ninput Apollo {\n  \"\"\"\n  Setting `apiKey` for Apollo.\n  \"\"\"\n  apiKey: String!\n  \"\"\"\n  Setting `graphRef` for Apollo in the format <graphId>@<variant>.\n  \"\"\"\n  graphRef: String!\n  \"\"\"\n  Setting `platform` for Apollo.\n  \"\"\"\n  platform: String\n  \"\"\"\n  Setting `userVersion` for Apollo.\n  \"\"\"\n  userVersion: String\n  \"\"\"\n  Setting `version` for Apollo.\n  \"\"\"\n  version: String\n}\n\n\"\"\"\nOutput the opentelemetry data to otlp collector\n\"\"\"\ninput OtlpExporter {\n  headers: [KeyValue]\n  url: String!\n}\n\n\"\"\"\nOutput the telemetry metrics data to prometheus server\n\"\"\"\ninput PrometheusExporter {\n  format: PrometheusFormat\n  path: String!\n}\n\n\"\"\"\nOutput the opentelemetry data to the stdout. Mostly used for debug purposes\n\"\"\"\ninput StdoutExporter {\n  \"\"\"\n  Output to stdout in pretty human-readable format\n  \"\"\"\n  pretty: Boolean!\n}\n\ninput TelemetryExporter {\n  stdout: StdoutExporter\n  otlp: OtlpExporter\n  prometheus: PrometheusExporter\n  apollo: Apollo\n}\n\ninput Batch {\n  delay: Int!\n  headers: [String!]\n  maxSize: Int\n}\n\ninput Proxy {\n  url: String!\n}\n\n\"\"\"\nThe @graphQL operator allows to specify GraphQL API server request to fetch data \nfrom.\n\"\"\"\ninput GraphQL {\n  \"\"\"\n  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)\n  \"\"\"\n  args: [KeyValue]\n  \"\"\"\n  This refers to the base URL of the API. If not specified, the default base URL is \n  the one specified in the `@upstream` operator.\n  \"\"\"\n  baseURL: String\n  \"\"\"\n  If the upstream GraphQL server supports request batching, you can specify the 'batch' \n  argument to batch several requests into a single batch request.Make sure you have \n  also specified batch settings to the `@upstream` and to the `@graphQL` operator.\n  \"\"\"\n  batch: Boolean!\n  \"\"\"\n  The headers parameter allows you to customize the headers of the GraphQL request \n  made by the `@graphQL` operator. It is used by specifying a key-value map of header \n  names and their values.\n  \"\"\"\n  headers: [KeyValue]\n  \"\"\"\n  Specifies the root field on the upstream to request data from. This maps a field \n  in your schema to a field in the upstream schema. When a query is received for this \n  field, Tailcall requests data from the corresponding upstream field.\n  \"\"\"\n  name: String!\n}\n\n\"\"\"\nThe @grpc operator indicates that a field or node is backed by a gRPC API.For instance, \nif you add the @grpc operator to the `users` field of the Query type with a service \nargument of `NewsService` and method argument of `GetAllNews`, it signifies that \nthe `users` field is backed by a gRPC API. The `service` argument specifies the name \nof the gRPC service. The `method` argument specifies the name of the gRPC method. \nIn this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint \nspecified when the `users` field is queried.\n\"\"\"\ninput Grpc {\n  \"\"\"\n  This refers to the base URL of the API. If not specified, the default base URL is \n  the one specified in the `@upstream` operator.\n  \"\"\"\n  baseURL: String\n  \"\"\"\n  The `batchKey` dictates the path Tailcall will follow to group the returned items \n  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).\n  \"\"\"\n  batchKey: [String!]\n  \"\"\"\n  This refers to the arguments of your gRPC call. You can pass it as a static object \n  or use Mustache template for dynamic parameters. These parameters will be added in \n  the body in `protobuf` format.\n  \"\"\"\n  body: JSON\n  \"\"\"\n  The `headers` parameter allows you to customize the headers of the HTTP request made \n  by the `@grpc` operator. It is used by specifying a key-value map of header names \n  and their values. Note: content-type is automatically set to application/grpc\n  \"\"\"\n  headers: [KeyValue]\n  \"\"\"\n  This refers to the gRPC method you're going to call. For instance `GetAllNews`.\n  \"\"\"\n  method: String!\n}\n\n\"\"\"\nThe @http operator indicates that a field or node is backed by a REST API.For instance, \nif you add the @http operator to the `users` field of the Query type with a path \nargument of `\"/users\"`, it signifies that the `users` field is backed by a REST API. \nThe path argument specifies the path of the REST API. In this scenario, the GraphQL \nserver will make a GET request to the API endpoint specified when the `users` field \nis queried.\n\"\"\"\ninput Http {\n  \"\"\"\n  This refers to the base URL of the API. If not specified, the default base URL is \n  the one specified in the `@upstream` operator.\n  \"\"\"\n  baseURL: String\n  \"\"\"\n  The `batchKey` dictates the path Tailcall will follow to group the returned items \n  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).\n  \"\"\"\n  batchKey: [String!]\n  \"\"\"\n  The body of the API call. It's used for methods like POST or PUT that send data to \n  the server. You can pass it as a static object or use a Mustache template to substitute \n  variables from the GraphQL variables.\n  \"\"\"\n  body: String\n  \"\"\"\n  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` \n  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.\n  \"\"\"\n  encoding: Encoding\n  \"\"\"\n  The `headers` parameter allows you to customize the headers of the HTTP request made \n  by the `@http` operator. It is used by specifying a key-value map of header names \n  and their values.\n  \"\"\"\n  headers: [KeyValue]\n  \"\"\"\n  Schema of the input of the API call. It is automatically inferred in most cases.\n  \"\"\"\n  input: Schema\n  \"\"\"\n  This refers to the HTTP method of the API call. Commonly used methods include `GET`, \n  `POST`, `PUT`, `DELETE` etc. @default `GET`.\n  \"\"\"\n  method: Method\n  \"\"\"\n  onRequest field in @http directive gives the ability to specify the request interception \n  handler.\n  \"\"\"\n  onRequest: String\n  \"\"\"\n  Schema of the output of the API call. It is automatically inferred in most cases.\n  \"\"\"\n  output: Schema\n  \"\"\"\n  This refers to the API endpoint you're going to call. For instance `https://jsonplaceholder.typicode.com/users`.For \n  dynamic segments in your API endpoint, use Mustache templates for variable substitution. \n  For instance, to fetch a specific user, use `/users/{{args.id}}`.\n  \"\"\"\n  path: String!\n  \"\"\"\n  This represents the query parameters of your API call. You can pass it as a static \n  object or use Mustache template for dynamic parameters. These parameters will be \n  added to the URL. NOTE: Query parameter order is critical for batching in Tailcall. \n  The first parameter referencing a field in the current value using mustache syntax \n  is automatically selected as the batching parameter.\n  \"\"\"\n  query: [URLQuery]\n}\n\n\"\"\"\nThe `@expr` operators allows you to specify an expression that can evaluate to a \nvalue. The expression can be a static value or built form a Mustache template. schema.\n\"\"\"\ninput Expr {\n  body: JSON\n}\n\ninput JS {\n  name: String!\n}\n\ninput Modify {\n  name: String\n  omit: Boolean\n}\n\n\"\"\"\nThe @cache operator enables caching for the query, field or type it is applied to.\n\"\"\"\ninput Cache {\n  \"\"\"\n  Specifies the duration, in milliseconds, of how long the value has to be stored in \n  the cache.\n  \"\"\"\n  maxAge: Int!\n}\n\n\"\"\"\nThe @telemetry directive facilitates seamless integration with OpenTelemetry, enhancing \nthe observability of your GraphQL services powered by Tailcall.  By leveraging this \ndirective, developers gain access to valuable insights into the performance and behavior \nof their applications.\n\"\"\"\ninput Telemetry {\n  export: TelemetryExporter\n  \"\"\"\n  The list of headers that will be sent as additional attributes to telemetry exporters \n  Be careful about **leaking sensitive information** from requests when enabling the \n  headers that may contain sensitive data\n  \"\"\"\n  requestHeaders: [String!]\n}\n\nenum Encoding {\n  ApplicationJson\n  ApplicationXWwwFormUrlencoded\n}\n\nenum Method {\n  GET\n  POST\n  PUT\n  PATCH\n  DELETE\n  HEAD\n  OPTIONS\n  CONNECT\n  TRACE\n}\n\nenum LinkType {\n  Config\n  Protobuf\n  Script\n  Cert\n  Key\n  Operation\n  Htpasswd\n  Jwks\n  Grpc\n}\n\nenum HttpVersion {\n  HTTP1\n  HTTP2\n}\n\n\"\"\"\nOutput format for prometheus data\n\"\"\"\nenum PrometheusFormat {\n  text\n  protobuf\n}\n\nextend schema @link(\n\turl: \"https://specs.apollo.dev/federation/v2.3\",\n\timport: [\"@key\", \"@tag\", \"@shareable\", \"@inaccessible\", \"@override\", \"@external\", \"@provides\", \"@requires\", \"@composeDirective\", \"@interfaceObject\"]\n)\n"
      }
    }
  }
}
