---
source: tests/core/spec.rs
expression: formatted
---
scalar Bytes

scalar Date

scalar Email

scalar Empty

scalar Int128

scalar Int16

scalar Int32

scalar Int64

scalar Int8

scalar JSON

type News {
  body: String
  id: Int
  postImage: String
  title: String
}

type NewsData {
  news: [News]!
}

scalar PhoneNumber

type Post {
  body: String
  id: Int
  news: NewsData!
  newsWithPortArg: NewsData!
  title: String
  user(id: Int): User
  user1: User
  userFromValue: User
  userGraphQL(id: Int): User
  userGraphQLHeaders(id: Int): User
  userHttpHeaders(id: ID): User
  userHttpQuery(id: ID): User
  userId: Int!
}

type Query {
  news: NewsData!
  newsWithPortArg(port: Int!): NewsData!
  posts: [Post]
  user(id: Int!): User
  user1: User
  userFromValue: User
  userGraphQL(id: Int): User
  userGraphQLHeaders(id: Int!): User
  userHttpHeaders(id: ID!): User
  userHttpQuery(id: ID!): User
  userId: Int!
  userPosts(id: ID!): [Post]
  userWithPosts: UserWithPosts
}

scalar UInt128

scalar UInt16

scalar UInt32

scalar UInt64

scalar UInt8

scalar Url

type User {
  email: String!
  id: Int!
  name: String!
  phone: String
  username: String!
  website: String
}

type UserWithPosts {
  id: Int!
  name: String!
  posts(id: ID): [Post]
}

schema {
  query: Query
}
