schema @server @upstream @link(src: "proto/news.proto", type: Protobuf) {
  query: Query
}

input GEN__news__MultipleNewsId @addField(name: "ids", path: ["ids", "id"]) {
  ids: [GEN__news__NewsId] @omit
}

input GEN__news__NewsId {
  id: Int
}

input GEN__news__NewsInput {
  body: String
  id: Int
  postImage: String
  status: GEN__news__Status
  title: String
}

enum GEN__news__Status {
  DELETED
  DRAFT
  PUBLISHED
}

type GEN__news__News {
  body: String
  id: Int
  postImage: String
  status: GEN__news__Status
  title: String
}

type GEN__news__NewsList {
  news: [GEN__news__News]
}

type Query {
  GEN__news__NewsService__AddNews(news: GEN__news__NewsInput!): GEN__news__News
    @http(url: "http://127.0.0.1:8080/news.NewsService/AddNews", body: "\"{{.args.news}}\"", method: "POST")
  GEN__news__NewsService__DeleteNews(newsId: GEN__news__NewsId!): Empty
    @http(url: "http://127.0.0.1:8080/news.NewsService/DeleteNews", body: "\"{{.args.newsId}}\"", method: "POST")
  GEN__news__NewsService__EditNews(news: GEN__news__NewsInput!): GEN__news__News
    @http(url: "http://127.0.0.1:8080/news.NewsService/EditNews", body: "\"{{.args.news}}\"", method: "POST")
  GEN__news__NewsService__GetAllNews: GEN__news__NewsList
    @http(url: "http://127.0.0.1:8080/news.NewsService/GetAllNews", body: "{}", method: "POST")
  GEN__news__NewsService__GetMultipleNews(multipleNewsId: GEN__news__MultipleNewsId!): GEN__news__NewsList
    @http(
      url: "http://127.0.0.1:8080/news.NewsService/GetMultipleNews"
      body: "\"{{.args.multipleNewsId}}\""
      method: "POST"
    )
  GEN__news__NewsService__GetNews(newsId: GEN__news__NewsId!): GEN__news__News
    @http(url: "http://127.0.0.1:8080/news.NewsService/GetNews", body: "\"{{.args.newsId}}\"", method: "POST")
}
