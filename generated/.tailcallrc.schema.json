{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AddField": {
      "description": "The @addField operator simplifies data structures and queries by adding a field that inlines or flattens a nested field or node within your schema. more info [here](https://tailcall.run/docs/guides/operators/#addfield)",
      "properties": {
        "name": {
          "description": "Name of the new field to be added",
          "type": "string"
        },
        "path": {
          "description": "Path of the data where the field should point to",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "path"
      ],
      "type": "object"
    },
    "Arg": {
      "properties": {
        "default_value": true,
        "doc": {
          "type": [
            "string",
            "null"
          ]
        },
        "list": {
          "type": "boolean"
        },
        "modify": {
          "anyOf": [
            {
              "$ref": "#/definitions/Modify"
            },
            {
              "type": "null"
            }
          ]
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "Batch": {
      "properties": {
        "delay": {
          "default": 0,
          "format": "uint",
          "minimum": 0.0,
          "type": "integer"
        },
        "headers": {
          "default": [],
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "maxSize": {
          "default": 100,
          "format": "uint",
          "minimum": 0.0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Cache": {
      "description": "The @cache operator enables caching for the query, field or type it is applied to.",
      "properties": {
        "maxAge": {
          "description": "Specifies the duration, in milliseconds, of how long the value has to be stored in the cache.",
          "format": "uint64",
          "minimum": 1.0,
          "type": "integer"
        }
      },
      "required": [
        "maxAge"
      ],
      "type": "object"
    },
    "Call": {
      "description": "For instance, if you have a `user(id: Int!): User @http(path: \"/users/{{args.id}}\")` field on the `Query` type, you can reference it from another field on the `Query` type using the `@call` operator. So, on `Post.user` you can declare `user: User @call(query: \"user\", args: {id: \"{{value.userId}}\"})`, and this will replace the `{{args.id}}` used in the `@http` operator with the value of `userId` from the `Post` type.\n\nIn case you have a `user(input: UserInput!): User @http(path: \"/users\")` field on the `Mutation` type, you can reference it from another field on the `Mutation` type. So, on `Post.user` you can declare `user: User @call(mutation: \"user\", args: {input: \"{{value.userInput}}\"})`, and this will replace the `{{args.input}}` used in the `@http` operator with the value of `userInput` from the `Post` type.",
      "properties": {
        "args": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The arguments of the field on the `Query` type that you want to call. For instance `{id: \"{{value.userId}}\"}`.",
          "type": "object"
        },
        "mutation": {
          "description": "The name of the field on the `Mutation` type that you want to call. For instance `createUser`.",
          "type": [
            "string",
            "null"
          ]
        },
        "query": {
          "description": "The name of the field on the `Query` type that you want to call. For instance `user`.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "required": [
        "args"
      ],
      "type": "object"
    },
    "Const": {
      "description": "The `@const` operators allows us to embed a constant response for the schema.",
      "properties": {
        "data": true
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "Encoding": {
      "enum": [
        "ApplicationJson",
        "ApplicationXWwwFormUrlencoded"
      ],
      "type": "string"
    },
    "Expr": {
      "description": "Allows composing operators as simple expressions",
      "properties": {
        "body": {
          "allOf": [
            {
              "$ref": "#/definitions/ExprBody"
            }
          ],
          "description": "Root of the expression AST"
        }
      },
      "required": [
        "body"
      ],
      "type": "object"
    },
    "ExprBody": {
      "oneOf": [
        {
          "additionalProperties": false,
          "description": "Fetch a resources using the http operator",
          "properties": {
            "http": {
              "$ref": "#/definitions/Http"
            }
          },
          "required": [
            "http"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Fetch a resources using the grpc operator",
          "properties": {
            "grpc": {
              "$ref": "#/definitions/Grpc"
            }
          },
          "required": [
            "grpc"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Fetch a resources using the graphQL operator",
          "properties": {
            "graphQL": {
              "$ref": "#/definitions/GraphQL"
            }
          },
          "required": [
            "graphQL"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Reuses a resolver pre-defined on type `Query`",
          "properties": {
            "call": {
              "$ref": "#/definitions/Call"
            }
          },
          "required": [
            "call"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Evaluate to constant data",
          "properties": {
            "const": true
          },
          "required": [
            "const"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "description": "Branch based on a condition",
          "properties": {
            "if": {
              "properties": {
                "cond": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/ExprBody"
                    }
                  ],
                  "description": "Condition to evaluate"
                },
                "else": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/ExprBody"
                    }
                  ],
                  "description": "Expression to evaluate if the condition is false"
                },
                "then": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/ExprBody"
                    }
                  ],
                  "description": "Expression to evaluate if the condition is true"
                }
              },
              "required": [
                "cond",
                "else",
                "then"
              ],
              "type": "object"
            }
          },
          "required": [
            "if"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "and": {
              "items": {
                "$ref": "#/definitions/ExprBody"
              },
              "type": "array"
            }
          },
          "required": [
            "and"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "or": {
              "items": {
                "$ref": "#/definitions/ExprBody"
              },
              "type": "array"
            }
          },
          "required": [
            "or"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "cond": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "items": {
                    "items": [
                      {
                        "$ref": "#/definitions/ExprBody"
                      },
                      {
                        "$ref": "#/definitions/ExprBody"
                      }
                    ],
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                  },
                  "type": "array"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "cond"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "defaultTo": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "defaultTo"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "isEmpty": {
              "$ref": "#/definitions/ExprBody"
            }
          },
          "required": [
            "isEmpty"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "not": {
              "$ref": "#/definitions/ExprBody"
            }
          },
          "required": [
            "not"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "concat": {
              "items": {
                "$ref": "#/definitions/ExprBody"
              },
              "type": "array"
            }
          },
          "required": [
            "concat"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "intersection": {
              "items": {
                "$ref": "#/definitions/ExprBody"
              },
              "type": "array"
            }
          },
          "required": [
            "intersection"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "difference": {
              "items": [
                {
                  "items": {
                    "$ref": "#/definitions/ExprBody"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/definitions/ExprBody"
                  },
                  "type": "array"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "difference"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "eq": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "eq"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "gt": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "gt"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "gte": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "gte"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "lt": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "lt"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "lte": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "lte"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "max": {
              "items": {
                "$ref": "#/definitions/ExprBody"
              },
              "type": "array"
            }
          },
          "required": [
            "max"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "min": {
              "items": {
                "$ref": "#/definitions/ExprBody"
              },
              "type": "array"
            }
          },
          "required": [
            "min"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "pathEq": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 3,
              "minItems": 3,
              "type": "array"
            }
          },
          "required": [
            "pathEq"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "propEq": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 3,
              "minItems": 3,
              "type": "array"
            }
          },
          "required": [
            "propEq"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "sortPath": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "sortPath"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "symmetricDifference": {
              "items": [
                {
                  "items": {
                    "$ref": "#/definitions/ExprBody"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/definitions/ExprBody"
                  },
                  "type": "array"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "symmetricDifference"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "union": {
              "items": [
                {
                  "items": {
                    "$ref": "#/definitions/ExprBody"
                  },
                  "type": "array"
                },
                {
                  "items": {
                    "$ref": "#/definitions/ExprBody"
                  },
                  "type": "array"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "union"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "mod": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "mod"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "add": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "add"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "dec": {
              "$ref": "#/definitions/ExprBody"
            }
          },
          "required": [
            "dec"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "divide": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "divide"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "inc": {
              "$ref": "#/definitions/ExprBody"
            }
          },
          "required": [
            "inc"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "multiply": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "multiply"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "negate": {
              "$ref": "#/definitions/ExprBody"
            }
          },
          "required": [
            "negate"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "product": {
              "items": {
                "$ref": "#/definitions/ExprBody"
              },
              "type": "array"
            }
          },
          "required": [
            "product"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "subtract": {
              "items": [
                {
                  "$ref": "#/definitions/ExprBody"
                },
                {
                  "$ref": "#/definitions/ExprBody"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          },
          "required": [
            "subtract"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "sum": {
              "items": {
                "$ref": "#/definitions/ExprBody"
              },
              "type": "array"
            }
          },
          "required": [
            "sum"
          ],
          "type": "object"
        }
      ]
    },
    "Field": {
      "description": "A field definition containing all the metadata information about resolving a field.",
      "properties": {
        "args": {
          "additionalProperties": {
            "$ref": "#/definitions/Arg"
          },
          "description": "Map of argument name and its definition.",
          "type": "object"
        },
        "cache": {
          "anyOf": [
            {
              "$ref": "#/definitions/Cache"
            },
            {
              "type": "null"
            }
          ],
          "description": "Sets the cache configuration for a field"
        },
        "call": {
          "anyOf": [
            {
              "$ref": "#/definitions/Call"
            },
            {
              "type": "null"
            }
          ],
          "description": "Inserts a call resolver for the field."
        },
        "const": {
          "anyOf": [
            {
              "$ref": "#/definitions/Const"
            },
            {
              "type": "null"
            }
          ],
          "description": "Inserts a constant resolver for the field."
        },
        "doc": {
          "description": "Publicly visible documentation for the field.",
          "type": [
            "string",
            "null"
          ]
        },
        "expr": {
          "anyOf": [
            {
              "$ref": "#/definitions/Expr"
            },
            {
              "type": "null"
            }
          ],
          "description": "Inserts an Expression resolver for the field."
        },
        "graphql": {
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQL"
            },
            {
              "type": "null"
            }
          ],
          "description": "Inserts a GraphQL resolver for the field."
        },
        "grpc": {
          "anyOf": [
            {
              "$ref": "#/definitions/Grpc"
            },
            {
              "type": "null"
            }
          ],
          "description": "Inserts a GRPC resolver for the field."
        },
        "http": {
          "anyOf": [
            {
              "$ref": "#/definitions/Http"
            },
            {
              "type": "null"
            }
          ],
          "description": "Inserts an HTTP resolver for the field."
        },
        "list": {
          "description": "Flag to indicate the type is a list.",
          "type": "boolean"
        },
        "list_type_required": {
          "description": "Flag to indicate if the type inside the list is required.",
          "type": "boolean"
        },
        "modify": {
          "anyOf": [
            {
              "$ref": "#/definitions/Modify"
            },
            {
              "type": "null"
            }
          ],
          "description": "Allows modifying existing fields."
        },
        "omit": {
          "anyOf": [
            {
              "$ref": "#/definitions/Omit"
            },
            {
              "type": "null"
            }
          ],
          "description": "Omits a field from public consumption."
        },
        "required": {
          "description": "Flag to indicate the type is required.",
          "type": "boolean"
        },
        "script": {
          "anyOf": [
            {
              "$ref": "#/definitions/JS"
            },
            {
              "type": "null"
            }
          ],
          "description": "Inserts a Javascript resolver for the field."
        },
        "type": {
          "description": "Refers to the type of the value the field can be resolved to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GraphQL": {
      "description": "The @graphQL operator allows to specify GraphQL API server request to fetch data from.",
      "properties": {
        "args": {
          "anyOf": [
            {
              "$ref": "#/definitions/KeyValues"
            },
            {
              "type": "null"
            }
          ],
          "description": "Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)"
        },
        "baseURL": {
          "description": "This refers to the base URL of the API. If not specified, the default base URL is the one specified in the `@upstream` operator.",
          "type": [
            "string",
            "null"
          ]
        },
        "batch": {
          "description": "If the upstream GraphQL server supports request batching, you can specify the 'batch' argument to batch several requests into a single batch request.\n\nMake sure you have also specified batch settings to the `@upstream` and to the `@graphQL` operator.",
          "type": "boolean"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyValues"
            }
          ],
          "description": "The headers parameter allows you to customize the headers of the GraphQL request made by the `@graphQL` operator. It is used by specifying a key-value map of header names and their values."
        },
        "name": {
          "description": "Specifies the root field on the upstream to request data from. This maps a field in your schema to a field in the upstream schema. When a query is received for this field, Tailcall requests data from the corresponding upstream field.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Grpc": {
      "description": "The @grpc operator indicates that a field or node is backed by a gRPC API.\n\nFor instance, if you add the @grpc operator to the `users` field of the Query type with a service argument of `NewsService` and method argument of `GetAllNews`, it signifies that the `users` field is backed by a gRPC API. The `service` argument specifies the name of the gRPC service. The `method` argument specifies the name of the gRPC method. In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint specified when the `users` field is queried.",
      "properties": {
        "baseURL": {
          "description": "This refers to the base URL of the API. If not specified, the default base URL is the one specified in the `@upstream` operator",
          "type": [
            "string",
            "null"
          ]
        },
        "body": {
          "description": "This refers to the arguments of your gRPC call. You can pass it as a static object or use Mustache template for dynamic parameters. These parameters will be added in the body in `protobuf` format.",
          "type": [
            "string",
            "null"
          ]
        },
        "groupBy": {
          "description": "The key path in the response which should be used to group multiple requests. For instance `[\"news\",\"id\"]`. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyValues"
            }
          ],
          "description": "The `headers` parameter allows you to customize the headers of the HTTP request made by the `@grpc` operator. It is used by specifying a key-value map of header names and their values. Note: content-type is automatically set to application/grpc"
        },
        "method": {
          "description": "This refers to the gRPC method you're going to call. For instance `GetAllNews`.",
          "type": "string"
        },
        "protoPath": {
          "description": "The `protoPath` parameter allows you to specify the path to the proto file which contains service and method definitions and is used to encode and decode the request and response body.",
          "type": "string"
        },
        "service": {
          "description": "This refers to the gRPC service you're going to call. For instance `NewsService`.",
          "type": "string"
        }
      },
      "required": [
        "method",
        "protoPath",
        "service"
      ],
      "type": "object"
    },
    "Http": {
      "description": "The @http operator indicates that a field or node is backed by a REST API.\n\nFor instance, if you add the @http operator to the `users` field of the Query type with a path argument of `\"/users\"`, it signifies that the `users` field is backed by a REST API. The path argument specifies the path of the REST API. In this scenario, the GraphQL server will make a GET request to the API endpoint specified when the `users` field is queried.",
      "properties": {
        "baseURL": {
          "description": "This refers to the base URL of the API. If not specified, the default base URL is the one specified in the `@upstream` operator",
          "type": [
            "string",
            "null"
          ]
        },
        "body": {
          "description": "The body of the API call. It's used for methods like POST or PUT that send data to the server. You can pass it as a static object or use a Mustache template to substitute variables from the GraphQL variables.",
          "type": [
            "string",
            "null"
          ]
        },
        "encoding": {
          "allOf": [
            {
              "$ref": "#/definitions/Encoding"
            }
          ],
          "description": "The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`."
        },
        "groupBy": {
          "description": "The `groupBy` parameter groups multiple data requests into a single call. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyValues"
            }
          ],
          "description": "The `headers` parameter allows you to customize the headers of the HTTP request made by the `@http` operator. It is used by specifying a key-value map of header names and their values."
        },
        "input": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "null"
            }
          ],
          "description": "Schema of the input of the API call. It is automatically inferred in most cases."
        },
        "method": {
          "allOf": [
            {
              "$ref": "#/definitions/Method"
            }
          ],
          "description": "This refers to the HTTP method of the API call. Commonly used methods include `GET`, `POST`, `PUT`, `DELETE` etc. @default `GET`."
        },
        "output": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "null"
            }
          ],
          "description": "Schema of the output of the API call. It is automatically inferred in most cases."
        },
        "path": {
          "description": "This refers to the API endpoint you're going to call. For instance https://jsonplaceholder.typicode.com/users`.\n\nFor dynamic segments in your API endpoint, use Mustache templates for variable substitution. For instance, to fetch a specific user, use `/users/{{args.id}}`.",
          "type": "string"
        },
        "query": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyValues"
            }
          ],
          "description": "This represents the query parameters of your API call. You can pass it as a static object or use Mustache template for dynamic parameters. These parameters will be added to the URL."
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "HttpVersion": {
      "enum": [
        "HTTP1",
        "HTTP2"
      ],
      "type": "string"
    },
    "JS": {
      "properties": {
        "script": {
          "type": "string"
        }
      },
      "required": [
        "script"
      ],
      "type": "object"
    },
    "KeyValues": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "Method": {
      "enum": [
        "GET",
        "POST",
        "PUT",
        "PATCH",
        "DELETE",
        "HEAD",
        "OPTIONS",
        "CONNECT",
        "TRACE"
      ],
      "type": "string"
    },
    "Modify": {
      "properties": {
        "name": {
          "type": [
            "string",
            "null"
          ]
        },
        "omit": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Omit": {
      "type": "object"
    },
    "Proxy": {
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "RootSchema": {
      "properties": {
        "mutation": {
          "type": [
            "string",
            "null"
          ]
        },
        "query": {
          "type": [
            "string",
            "null"
          ]
        },
        "subscription": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "Script": {
      "oneOf": [
        {
          "additionalProperties": false,
          "properties": {
            "path": {
              "$ref": "#/definitions/ScriptOptions"
            }
          },
          "required": [
            "path"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "file": {
              "$ref": "#/definitions/ScriptOptions"
            }
          },
          "required": [
            "file"
          ],
          "type": "object"
        }
      ]
    },
    "ScriptOptions": {
      "properties": {
        "src": {
          "type": "string"
        },
        "timeout": {
          "format": "uint64",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        }
      },
      "required": [
        "src"
      ],
      "type": "object"
    },
    "Server": {
      "description": "The `@server` directive, when applied at the schema level, offers a comprehensive set of server configurations. It dictates how the server behaves and helps tune tailcall for various use-cases.",
      "properties": {
        "apolloTracing": {
          "description": "`apolloTracing` exposes GraphQL query performance data, including execution time of queries and individual resolvers.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "batchRequests": {
          "description": "`batchRequests` combines multiple requests into one, improving performance but potentially introducing latency and complicating debugging. Use judiciously. @default `false`",
          "type": [
            "boolean",
            "null"
          ]
        },
        "cacheControlHeader": {
          "description": "`cacheControlHeader` sends `Cache-Control` headers in responses when activated. The `max-age` value is the least of the values received from upstream services. @default `false`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "cert": {
          "description": "`cert` sets the path to certificate(s) for running the server over HTTP2 (HTTPS). @default `null`.",
          "type": [
            "string",
            "null"
          ]
        },
        "globalResponseTimeout": {
          "description": "`globalResponseTimeout` sets the maximum query duration before termination, acting as a safeguard against long-running queries.",
          "format": "int64",
          "type": [
            "integer",
            "null"
          ]
        },
        "graphiql": {
          "description": "`graphiql` activates the GraphiQL IDE at the root path within Tailcall, a tool for query development and testing. @default `false`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "hostname": {
          "description": "`hostname` sets the server hostname.",
          "type": [
            "string",
            "null"
          ]
        },
        "introspection": {
          "description": "`introspection` allows clients to fetch schema information directly, aiding tools and applications in understanding available types, fields, and operations. @default `true`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "key": {
          "description": "`key` sets the path to key for running the server over HTTP2 (HTTPS). @default `null`.",
          "type": [
            "string",
            "null"
          ]
        },
        "pipelineFlush": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "port": {
          "description": "`port` sets the Tailcall running port. @default `8000`.",
          "format": "uint16",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        },
        "queryValidation": {
          "description": "`queryValidation` checks incoming GraphQL queries against the schema, preventing errors from invalid queries. Can be disabled for performance. @default `false`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "responseHeaders": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyValues"
            }
          ],
          "description": "The responseHeader is a key-value pair array. These headers are included in every server response. Useful for headers like Access-Control-Allow-Origin for cross-origin requests, or additional headers like X-Allowed-Roles for downstream services."
        },
        "responseValidation": {
          "description": "`responseValidation` Tailcall automatically validates responses from upstream services using inferred schema. @default `false`.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "script": {
          "anyOf": [
            {
              "$ref": "#/definitions/Script"
            },
            {
              "type": "null"
            }
          ],
          "description": "A link to an external JS file that listens on every HTTP request response event."
        },
        "vars": {
          "allOf": [
            {
              "$ref": "#/definitions/KeyValues"
            }
          ],
          "description": "This configuration defines local variables for server operations. Useful for storing constant configurations, secrets, or shared information."
        },
        "version": {
          "anyOf": [
            {
              "$ref": "#/definitions/HttpVersion"
            },
            {
              "type": "null"
            }
          ],
          "description": "`version` sets the HTTP version for the server. Options are `HTTP1` and `HTTP2`. @default `HTTP1`."
        },
        "workers": {
          "description": "`workers` sets the number of worker threads. @default the number of system cores.",
          "format": "uint",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "Type": {
      "description": "Represents a GraphQL type. A type can be an object, interface, enum or scalar.",
      "properties": {
        "added_fields": {
          "description": "Additional fields to be added to the type",
          "items": {
            "$ref": "#/definitions/AddField"
          },
          "type": "array"
        },
        "cache": {
          "anyOf": [
            {
              "$ref": "#/definitions/Cache"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Setting to indicate if the type can be cached."
        },
        "doc": {
          "description": "Documentation for the type that is publicly visible.",
          "type": [
            "string",
            "null"
          ]
        },
        "enum": {
          "description": "Variants for the type if it's an enum",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true
        },
        "fields": {
          "additionalProperties": {
            "$ref": "#/definitions/Field"
          },
          "description": "A map of field name and its definition.",
          "type": "object"
        },
        "implements": {
          "description": "Interfaces that the type implements.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "interface": {
          "description": "Flag to indicate if the type is an interface.",
          "type": "boolean"
        },
        "scalar": {
          "description": "Flag to indicate if the type is a scalar.",
          "type": "boolean"
        }
      },
      "required": [
        "fields"
      ],
      "type": "object"
    },
    "Union": {
      "properties": {
        "doc": {
          "type": [
            "string",
            "null"
          ]
        },
        "types": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "types"
      ],
      "type": "object"
    },
    "Upstream": {
      "description": "The `upstream` directive allows you to control various aspects of the upstream server connection. This includes settings like connection timeouts, keep-alive intervals, and more. If not specified, default values are used.",
      "properties": {
        "allowedHeaders": {
          "description": "`allowedHeaders` defines the HTTP headers allowed to be forwarded to upstream services. If not set, no headers are forwarded, enhancing security but possibly limiting data flow.",
          "items": {
            "type": "string"
          },
          "type": [
            "array",
            "null"
          ],
          "uniqueItems": true
        },
        "baseURL": {
          "description": "This refers to the default base URL for your APIs. If it's not explicitly mentioned in the `@upstream` operator, then each [@http](#http) operator must specify its own `baseURL`. If neither `@upstream` nor [@http](#http) provides a `baseURL`, it results in a compilation error.",
          "type": [
            "string",
            "null"
          ]
        },
        "batch": {
          "anyOf": [
            {
              "$ref": "#/definitions/Batch"
            },
            {
              "type": "null"
            }
          ],
          "description": "An object that specifies the batch settings, including `maxSize` (the maximum size of the batch), `delay` (the delay in milliseconds between each batch), and `headers` (an array of HTTP headers to be included in the batch)."
        },
        "connectTimeout": {
          "description": "The time in seconds that the connection will wait for a response before timing out.",
          "format": "uint64",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        },
        "http2Only": {
          "description": "The `http2Only` setting allows you to specify whether the client should always issue HTTP2 requests, without checking if the server supports it or not. By default it is set to `false` for all HTTP requests made by the server, but is automatically set to true for GRPC.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "httpCache": {
          "description": "Activating this enables Tailcall's HTTP caching, adhering to the [HTTP Caching RFC](https://tools.ietf.org/html/rfc7234), to enhance performance by minimizing redundant data fetches. Defaults to `false` if unspecified.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "keepAliveInterval": {
          "description": "The time in seconds between each keep-alive message sent to maintain the connection.",
          "format": "uint64",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        },
        "keepAliveTimeout": {
          "description": "The time in seconds that the connection will wait for a keep-alive message before closing.",
          "format": "uint64",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        },
        "keepAliveWhileIdle": {
          "description": "A boolean value that determines whether keep-alive messages should be sent while the connection is idle.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "poolIdleTimeout": {
          "description": "The time in seconds that the connection pool will wait before closing idle connections.",
          "format": "uint64",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        },
        "poolMaxIdlePerHost": {
          "description": "The maximum number of idle connections that will be maintained per host.",
          "format": "uint",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        },
        "proxy": {
          "anyOf": [
            {
              "$ref": "#/definitions/Proxy"
            },
            {
              "type": "null"
            }
          ],
          "description": "The `proxy` setting defines an intermediary server through which the upstream requests will be routed before reaching their intended endpoint. By specifying a proxy URL, you introduce an additional layer, enabling custom routing and security policies."
        },
        "tcpKeepAlive": {
          "description": "The time in seconds between each TCP keep-alive message sent to maintain the connection.",
          "format": "uint64",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        },
        "timeout": {
          "description": "The maximum time in seconds that the connection will wait for a response.",
          "format": "uint64",
          "minimum": 0.0,
          "type": [
            "integer",
            "null"
          ]
        },
        "userAgent": {
          "description": "The User-Agent header value to be used in HTTP requests. @default `Tailcall/1.0`",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": "object"
    },
    "schema": {
      "oneOf": [
        {
          "enum": [
            "Str",
            "Num",
            "Bool"
          ],
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "Obj": {
              "additionalProperties": {
                "$ref": "#/definitions/schema"
              },
              "type": "object"
            }
          },
          "required": [
            "Obj"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "Arr": {
              "$ref": "#/definitions/schema"
            }
          },
          "required": [
            "Arr"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "Opt": {
              "$ref": "#/definitions/schema"
            }
          },
          "required": [
            "Opt"
          ],
          "type": "object"
        }
      ]
    }
  },
  "properties": {
    "schema": {
      "allOf": [
        {
          "$ref": "#/definitions/RootSchema"
        }
      ],
      "description": "Specifies the entry points for query and mutation in the generated GraphQL schema."
    },
    "server": {
      "allOf": [
        {
          "$ref": "#/definitions/Server"
        }
      ],
      "default": {},
      "description": "Dictates how the server behaves and helps tune tailcall for all ingress requests. Features such as request batching, SSL, HTTP2 etc. can be configured here."
    },
    "types": {
      "additionalProperties": {
        "$ref": "#/definitions/Type"
      },
      "default": {},
      "description": "A map of all the types in the schema.",
      "type": "object"
    },
    "unions": {
      "additionalProperties": {
        "$ref": "#/definitions/Union"
      },
      "description": "A map of all the union types in the schema.",
      "type": "object"
    },
    "upstream": {
      "allOf": [
        {
          "$ref": "#/definitions/Upstream"
        }
      ],
      "default": {},
      "description": "Dictates how tailcall should handle upstream requests/responses. Tuning upstream can improve performance and reliability for connections."
    }
  },
  "required": [
    "schema"
  ],
  "title": "Config",
  "type": "object"
}