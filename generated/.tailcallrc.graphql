"""
The @addField operator simplifies data structures and queries by adding a field that 
inlines or flattens a nested field or node within your schema. more info [here](https://tailcall.run/docs/guides/operators/#addfield)
"""
directive @addField(
  """
  Name of the new field to be added
  """
  name: String!
  """
  Path of the data where the field should point to
  """
  path: [String!]
) repeatable  on OBJECT

"""
The @cache operator enables caching for the query, field or type it is applied to.
"""
directive @cache(
  """
  Specifies the duration, in milliseconds, of how long the value has to be stored in 
  the cache.
  """
  maxAge: Int!
) on FIELD_DEFINITION

"""
The `@const` operators allows us to embed a constant response for the schema.
"""
directive @const(
  data: JSON
) on FIELD_DEFINITION

"""
Allows composing operators as simple expressions
"""
directive @expr(
  """
  Root of the expression AST
  """
  body: ExprBody
) on FIELD_DEFINITION

"""
The @graphQL operator allows to specify GraphQL API server request to fetch data 
from.
"""
directive @graphQL(
  """
  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)
  """
  args: KeyValues
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  If the upstream GraphQL server supports request batching, you can specify the 'batch' 
  argument to batch several requests into a single batch request.Make sure you have 
  also specified batch settings to the `@upstream` and to the `@graphQL` operator.
  """
  batch: Boolean!
  """
  The headers parameter allows you to customize the headers of the GraphQL request 
  made by the `@graphQL` operator. It is used by specifying a key-value map of header 
  names and their values.
  """
  headers: KeyValues
  """
  Specifies the root field on the upstream to request data from. This maps a field 
  in your schema to a field in the upstream schema. When a query is received for this 
  field, Tailcall requests data from the corresponding upstream field.
  """
  name: String!
) on FIELD_DEFINITION

"""
The @grpc operator indicates that a field or node is backed by a gRPC API.For instance, 
if you add the @grpc operator to the `users` field of the Query type with a service 
argument of `NewsService` and method argument of `GetAllNews`, it signifies that 
the `users` field is backed by a gRPC API. The `service` argument specifies the name 
of the gRPC service. The `method` argument specifies the name of the gRPC method. 
In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint 
specified when the `users` field is queried.
"""
directive @grpc(
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator
  """
  baseURL: String
  """
  This refers to the arguments of your gRPC call. You can pass it as a static object 
  or use Mustache template for dynamic parameters. These parameters will be added in 
  the body in `protobuf` format.
  """
  body: String
  """
  The key path in the response which should be used to group multiple requests. For 
  instance `["news","id"]`. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  groupBy: [String!]
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@grpc` operator. It is used by specifying a key-value map of header names 
  and their values. Note: content-type is automatically set to application/grpc
  """
  headers: KeyValues
  """
  This refers to the gRPC method you're going to call. For instance `GetAllNews`.
  """
  method: String!
  """
  The `protoPath` parameter allows you to specify the path to the proto file which 
  contains service and method definitions and is used to encode and decode the request 
  and response body.
  """
  protoPath: String!
  """
  This refers to the gRPC service you're going to call. For instance `NewsService`.
  """
  service: String!
) on FIELD_DEFINITION

"""
The @http operator indicates that a field or node is backed by a REST API.For instance, 
if you add the @http operator to the `users` field of the Query type with a path 
argument of `"/users"`, it signifies that the `users` field is backed by a REST API. 
The path argument specifies the path of the REST API. In this scenario, the GraphQL 
server will make a GET request to the API endpoint specified when the `users` field 
is queried.
"""
directive @http(
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator
  """
  baseURL: String
  """
  The body of the API call. It's used for methods like POST or PUT that send data to 
  the server. You can pass it as a static object or use a Mustache template to substitute 
  variables from the GraphQL variables.
  """
  body: String
  """
  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` 
  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.
  """
  encoding: Encoding
  """
  The `groupBy` parameter groups multiple data requests into a single call. For more 
  details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  groupBy: [String!]
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@http` operator. It is used by specifying a key-value map of header names 
  and their values.
  """
  headers: KeyValues
  """
  Schema of the input of the API call. It is automatically inferred in most cases.
  """
  input: Schema
  """
  This refers to the HTTP method of the API call. Commonly used methods include `GET`, 
  `POST`, `PUT`, `DELETE` etc. @default `GET`.
  """
  method: Method
  """
  Schema of the output of the API call. It is automatically inferred in most cases.
  """
  output: Schema
  """
  This refers to the API endpoint you're going to call. For instance https://jsonplaceholder.typicode.com/users`.For 
  dynamic segments in your API endpoint, use Mustache templates for variable substitution. 
  For instance, to fetch a specific user, use `/users/{{args.id}}`.
  """
  path: String!
  """
  This represents the query parameters of your API call. You can pass it as a static 
  object or use Mustache template for dynamic parameters. These parameters will be 
  added to the URL.
  """
  query: KeyValues
) on FIELD_DEFINITION

directive @js(
  script: String!
) on FIELD_DEFINITION

directive @modify(
  name: String
  omit: Boolean!
) on FIELD_DEFINITION

"""
The `@server` directive, when applied at the schema level, offers a comprehensive 
set of server configurations. It dictates how the server behaves and helps tune tailcall 
for various use-cases.
"""
directive @server(
  """
  `apolloTracing` exposes GraphQL query performance data, including execution time 
  of queries and individual resolvers.
  """
  apolloTracing: Boolean
  """
  `batchRequests` combines multiple requests into one, improving performance but potentially 
  introducing latency and complicating debugging. Use judiciously. @default `false`
  """
  batchRequests: Boolean
  """
  `cacheControlHeader` sends `Cache-Control` headers in responses when activated. The 
  `max-age` value is the least of the values received from upstream services. @default 
  `false`.
  """
  cacheControlHeader: Boolean
  """
  `cert` sets the path to certificate(s) for running the server over HTTP2 (HTTPS). 
  @default `null`.
  """
  cert: String
  """
  `globalResponseTimeout` sets the maximum query duration before termination, acting 
  as a safeguard against long-running queries.
  """
  globalResponseTimeout: Int
  """
  `graphiql` activates the GraphiQL IDE at the root path within Tailcall, a tool for 
  query development and testing. @default `false`.
  """
  graphiql: Boolean
  """
  `hostname` sets the server hostname.
  """
  hostname: String
  """
  `introspection` allows clients to fetch schema information directly, aiding tools 
  and applications in understanding available types, fields, and operations. @default 
  `true`.
  """
  introspection: Boolean
  """
  `key` sets the path to key for running the server over HTTP2 (HTTPS). @default `null`.
  """
  key: String
  pipelineFlush: Boolean
  """
  `port` sets the Tailcall running port. @default `8000`.
  """
  port: Int
  """
  `queryValidation` checks incoming GraphQL queries against the schema, preventing 
  errors from invalid queries. Can be disabled for performance. @default `false`.
  """
  queryValidation: Boolean
  """
  The responseHeader is a key-value pair array. These headers are included in every 
  server response. Useful for headers like Access-Control-Allow-Origin for cross-origin 
  requests, or additional headers like X-Allowed-Roles for downstream services.
  """
  responseHeaders: KeyValues
  """
  `responseValidation` Tailcall automatically validates responses from upstream services 
  using inferred schema. @default `false`.
  """
  responseValidation: Boolean
  """
  A link to an external JS file that listens on every HTTP request response event.
  """
  script: Script
  """
  This configuration defines local variables for server operations. Useful for storing 
  constant configurations, secrets, or shared information.
  """
  vars: KeyValues
  """
  `version` sets the HTTP version for the server. Options are `HTTP1` and `HTTP2`. 
  @default `HTTP1`.
  """
  version: HttpVersion
  """
  `workers` sets the number of worker threads. @default the number of system cores.
  """
  workers: Int
) on SCHEMA

"""
The `upstream` directive allows you to control various aspects of the upstream server 
connection. This includes settings like connection timeouts, keep-alive intervals, 
and more. If not specified, default values are used.
"""
directive @upstream(
  """
  `allowedHeaders` defines the HTTP headers allowed to be forwarded to upstream services. 
  If not set, no headers are forwarded, enhancing security but possibly limiting data 
  flow.
  """
  allowedHeaders: [String!]
  """
  This refers to the default base URL for your APIs. If it's not explicitly mentioned 
  in the `@upstream` operator, then each [@http](#http) operator must specify its own 
  `baseURL`. If neither `@upstream` nor [@http](#http) provides a `baseURL`, it results 
  in a compilation error.
  """
  baseURL: String
  """
  An object that specifies the batch settings, including `maxSize` (the maximum size 
  of the batch), `delay` (the delay in milliseconds between each batch), and `headers` 
  (an array of HTTP headers to be included in the batch).
  """
  batch: Batch
  """
  The time in seconds that the connection will wait for a response before timing out.
  """
  connectTimeout: Int
  """
  The `http2Only` setting allows you to specify whether the client should always issue 
  HTTP2 requests, without checking if the server supports it or not. By default it 
  is set to `false` for all HTTP requests made by the server, but is automatically 
  set to true for GRPC.
  """
  http2Only: Boolean
  """
  Activating this enables Tailcall's HTTP caching, adhering to the [HTTP Caching RFC](https://tools.ietf.org/html/rfc7234), 
  to enhance performance by minimizing redundant data fetches. Defaults to `false` 
  if unspecified.
  """
  httpCache: Boolean
  """
  The time in seconds between each keep-alive message sent to maintain the connection.
  """
  keepAliveInterval: Int
  """
  The time in seconds that the connection will wait for a keep-alive message before 
  closing.
  """
  keepAliveTimeout: Int
  """
  A boolean value that determines whether keep-alive messages should be sent while 
  the connection is idle.
  """
  keepAliveWhileIdle: Boolean
  """
  The time in seconds that the connection pool will wait before closing idle connections.
  """
  poolIdleTimeout: Int
  """
  The maximum number of idle connections that will be maintained per host.
  """
  poolMaxIdlePerHost: Int
  """
  The `proxy` setting defines an intermediary server through which the upstream requests 
  will be routed before reaching their intended endpoint. By specifying a proxy URL, 
  you introduce an additional layer, enabling custom routing and security policies.
  """
  proxy: Proxy
  """
  The time in seconds between each TCP keep-alive message sent to maintain the connection.
  """
  tcpKeepAlive: Int
  """
  The maximum time in seconds that the connection will wait for a response.
  """
  timeout: Int
  """
  The User-Agent header value to be used in HTTP requests. @default `Tailcall/1.0`
  """
  userAgent: String
) on SCHEMA

input Batch {
  delay: Int!
  headers: [String!]
  maxSize: Int!
}
"""
The @cache operator enables caching for the query, field or type it is applied to.
"""
input Cache {
  """
  Specifies the duration, in milliseconds, of how long the value has to be stored in 
  the cache.
  """
  maxAge: Int!
}
"""
The `@const` operators allows us to embed a constant response for the schema.
"""
input Const {
  data: JSON
}
enum Encoding {
  ApplicationJson
  ApplicationXWwwFormUrlencoded
}
"""
Allows composing operators as simple expressions
"""
input Expr {
  """
  Root of the expression AST
  """
  body: ExprBody
}
input ExprBody {
  http: Http
  grpc: Grpc
  graphQL: GraphQL
  const: JSON
  if: ExprIf
  and: [ExprBody]
  or: [ExprBody]
  cond: [ExprBody]
  defaultTo: [ExprBody]
  isEmpty: ExprBody
  not: ExprBody
  concat: [ExprBody]
  intersection: [ExprBody]
  difference: [[ExprBody]]
  eq: [ExprBody]
  gt: [ExprBody]
  gte: [ExprBody]
  lt: [ExprBody]
  lte: [ExprBody]
  max: [ExprBody]
  min: [ExprBody]
  pathEq: [ExprBody]
  propEq: [ExprBody]
  sortPath: [ExprBody]
  symmetricDifference: [[ExprBody]]
  union: [[ExprBody]]
  mod: [ExprBody]
  add: [ExprBody]
  dec: ExprBody
  divide: [ExprBody]
  inc: ExprBody
  multiply: [ExprBody]
  negate: ExprBody
  product: [ExprBody]
  subtract: [ExprBody]
  sum: [ExprBody]
}
input ExprIf {
  """
  Condition to evaluate
  """
  cond: ExprBody
  """
  Expression to evaluate if the condition is false
  """
  else: ExprBody
  """
  Expression to evaluate if the condition is true
  """
  then: ExprBody
}
"""
The @graphQL operator allows to specify GraphQL API server request to fetch data 
from.
"""
input GraphQL {
  """
  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)
  """
  args: KeyValues
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  If the upstream GraphQL server supports request batching, you can specify the 'batch' 
  argument to batch several requests into a single batch request.Make sure you have 
  also specified batch settings to the `@upstream` and to the `@graphQL` operator.
  """
  batch: Boolean!
  """
  The headers parameter allows you to customize the headers of the GraphQL request 
  made by the `@graphQL` operator. It is used by specifying a key-value map of header 
  names and their values.
  """
  headers: KeyValues
  """
  Specifies the root field on the upstream to request data from. This maps a field 
  in your schema to a field in the upstream schema. When a query is received for this 
  field, Tailcall requests data from the corresponding upstream field.
  """
  name: String!
}
"""
The @grpc operator indicates that a field or node is backed by a gRPC API.For instance, 
if you add the @grpc operator to the `users` field of the Query type with a service 
argument of `NewsService` and method argument of `GetAllNews`, it signifies that 
the `users` field is backed by a gRPC API. The `service` argument specifies the name 
of the gRPC service. The `method` argument specifies the name of the gRPC method. 
In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint 
specified when the `users` field is queried.
"""
input Grpc {
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator
  """
  baseURL: String
  """
  This refers to the arguments of your gRPC call. You can pass it as a static object 
  or use Mustache template for dynamic parameters. These parameters will be added in 
  the body in `protobuf` format.
  """
  body: String
  """
  The key path in the response which should be used to group multiple requests. For 
  instance `["news","id"]`. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  groupBy: [String!]
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@grpc` operator. It is used by specifying a key-value map of header names 
  and their values. Note: content-type is automatically set to application/grpc
  """
  headers: KeyValues
  """
  This refers to the gRPC method you're going to call. For instance `GetAllNews`.
  """
  method: String!
  """
  The `protoPath` parameter allows you to specify the path to the proto file which 
  contains service and method definitions and is used to encode and decode the request 
  and response body.
  """
  protoPath: String!
  """
  This refers to the gRPC service you're going to call. For instance `NewsService`.
  """
  service: String!
}
"""
The @http operator indicates that a field or node is backed by a REST API.For instance, 
if you add the @http operator to the `users` field of the Query type with a path 
argument of `"/users"`, it signifies that the `users` field is backed by a REST API. 
The path argument specifies the path of the REST API. In this scenario, the GraphQL 
server will make a GET request to the API endpoint specified when the `users` field 
is queried.
"""
input Http {
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator
  """
  baseURL: String
  """
  The body of the API call. It's used for methods like POST or PUT that send data to 
  the server. You can pass it as a static object or use a Mustache template to substitute 
  variables from the GraphQL variables.
  """
  body: String
  """
  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` 
  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.
  """
  encoding: Encoding
  """
  The `groupBy` parameter groups multiple data requests into a single call. For more 
  details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  groupBy: [String!]
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@http` operator. It is used by specifying a key-value map of header names 
  and their values.
  """
  headers: KeyValues
  """
  Schema of the input of the API call. It is automatically inferred in most cases.
  """
  input: Schema
  """
  This refers to the HTTP method of the API call. Commonly used methods include `GET`, 
  `POST`, `PUT`, `DELETE` etc. @default `GET`.
  """
  method: Method
  """
  Schema of the output of the API call. It is automatically inferred in most cases.
  """
  output: Schema
  """
  This refers to the API endpoint you're going to call. For instance https://jsonplaceholder.typicode.com/users`.For 
  dynamic segments in your API endpoint, use Mustache templates for variable substitution. 
  For instance, to fetch a specific user, use `/users/{{args.id}}`.
  """
  path: String!
  """
  This represents the query parameters of your API call. You can pass it as a static 
  object or use Mustache template for dynamic parameters. These parameters will be 
  added to the URL.
  """
  query: KeyValues
}
enum HttpVersion {
  HTTP1
  HTTP2
}
input JS {
  script: String!
}
enum Method {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
  CONNECT
  TRACE
}
input Modify {
  name: String
  omit: Boolean!
}
input Proxy {
  url: String!
}
input Script {
  path: ScriptOptions
  file: ScriptOptions
}
input ScriptOptions {
  src: String!
  timeout: Int
}
input Schema {
  Obj: JSON
  Arr: Schema
  Opt: Schema
}
input Batch {
  delay: Int!
  headers: [String!]
  maxSize: Int!
}
enum Encoding {
  ApplicationJson
  ApplicationXWwwFormUrlencoded
}
input ExprBody {
  http: Http
  grpc: Grpc
  graphQL: GraphQL
  const: JSON
  if: ExprIf
  and: [ExprBody]
  or: [ExprBody]
  cond: [ExprBody]
  defaultTo: [ExprBody]
  isEmpty: ExprBody
  not: ExprBody
  concat: [ExprBody]
  intersection: [ExprBody]
  difference: [[ExprBody]]
  eq: [ExprBody]
  gt: [ExprBody]
  gte: [ExprBody]
  lt: [ExprBody]
  lte: [ExprBody]
  max: [ExprBody]
  min: [ExprBody]
  pathEq: [ExprBody]
  propEq: [ExprBody]
  sortPath: [ExprBody]
  symmetricDifference: [[ExprBody]]
  union: [[ExprBody]]
  mod: [ExprBody]
  add: [ExprBody]
  dec: ExprBody
  divide: [ExprBody]
  inc: ExprBody
  multiply: [ExprBody]
  negate: ExprBody
  product: [ExprBody]
  subtract: [ExprBody]
  sum: [ExprBody]
}
input ExprIf {
  """
  Condition to evaluate
  """
  cond: ExprBody
  """
  Expression to evaluate if the condition is false
  """
  else: ExprBody
  """
  Expression to evaluate if the condition is true
  """
  then: ExprBody
}
"""
The @graphQL operator allows to specify GraphQL API server request to fetch data 
from.
"""
input GraphQL {
  """
  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)
  """
  args: KeyValues
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  If the upstream GraphQL server supports request batching, you can specify the 'batch' 
  argument to batch several requests into a single batch request.Make sure you have 
  also specified batch settings to the `@upstream` and to the `@graphQL` operator.
  """
  batch: Boolean!
  """
  The headers parameter allows you to customize the headers of the GraphQL request 
  made by the `@graphQL` operator. It is used by specifying a key-value map of header 
  names and their values.
  """
  headers: KeyValues
  """
  Specifies the root field on the upstream to request data from. This maps a field 
  in your schema to a field in the upstream schema. When a query is received for this 
  field, Tailcall requests data from the corresponding upstream field.
  """
  name: String!
}
"""
The @grpc operator indicates that a field or node is backed by a gRPC API.For instance, 
if you add the @grpc operator to the `users` field of the Query type with a service 
argument of `NewsService` and method argument of `GetAllNews`, it signifies that 
the `users` field is backed by a gRPC API. The `service` argument specifies the name 
of the gRPC service. The `method` argument specifies the name of the gRPC method. 
In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint 
specified when the `users` field is queried.
"""
input Grpc {
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator
  """
  baseURL: String
  """
  This refers to the arguments of your gRPC call. You can pass it as a static object 
  or use Mustache template for dynamic parameters. These parameters will be added in 
  the body in `protobuf` format.
  """
  body: String
  """
  The key path in the response which should be used to group multiple requests. For 
  instance `["news","id"]`. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  groupBy: [String!]
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@grpc` operator. It is used by specifying a key-value map of header names 
  and their values. Note: content-type is automatically set to application/grpc
  """
  headers: KeyValues
  """
  This refers to the gRPC method you're going to call. For instance `GetAllNews`.
  """
  method: String!
  """
  The `protoPath` parameter allows you to specify the path to the proto file which 
  contains service and method definitions and is used to encode and decode the request 
  and response body.
  """
  protoPath: String!
  """
  This refers to the gRPC service you're going to call. For instance `NewsService`.
  """
  service: String!
}
"""
The @http operator indicates that a field or node is backed by a REST API.For instance, 
if you add the @http operator to the `users` field of the Query type with a path 
argument of `"/users"`, it signifies that the `users` field is backed by a REST API. 
The path argument specifies the path of the REST API. In this scenario, the GraphQL 
server will make a GET request to the API endpoint specified when the `users` field 
is queried.
"""
input Http {
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator
  """
  baseURL: String
  """
  The body of the API call. It's used for methods like POST or PUT that send data to 
  the server. You can pass it as a static object or use a Mustache template to substitute 
  variables from the GraphQL variables.
  """
  body: String
  """
  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` 
  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.
  """
  encoding: Encoding
  """
  The `groupBy` parameter groups multiple data requests into a single call. For more 
  details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  groupBy: [String!]
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@http` operator. It is used by specifying a key-value map of header names 
  and their values.
  """
  headers: KeyValues
  """
  Schema of the input of the API call. It is automatically inferred in most cases.
  """
  input: Schema
  """
  This refers to the HTTP method of the API call. Commonly used methods include `GET`, 
  `POST`, `PUT`, `DELETE` etc. @default `GET`.
  """
  method: Method
  """
  Schema of the output of the API call. It is automatically inferred in most cases.
  """
  output: Schema
  """
  This refers to the API endpoint you're going to call. For instance https://jsonplaceholder.typicode.com/users`.For 
  dynamic segments in your API endpoint, use Mustache templates for variable substitution. 
  For instance, to fetch a specific user, use `/users/{{args.id}}`.
  """
  path: String!
  """
  This represents the query parameters of your API call. You can pass it as a static 
  object or use Mustache template for dynamic parameters. These parameters will be 
  added to the URL.
  """
  query: KeyValues
}
enum HttpVersion {
  HTTP1
  HTTP2
}
enum Method {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
  CONNECT
  TRACE
}
input Proxy {
  url: String!
}
scalar KeyValues
scalar JSON

