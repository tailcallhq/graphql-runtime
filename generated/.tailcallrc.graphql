"""
The @addField operator simplifies data structures and queries by adding a field that 
inlines or flattens a nested field or node within your schema. more info [here](https://tailcall.run/docs/guides/operators/#addfield)
"""
directive @addField(
  """
  Name of the new field to be added
  """
  name: String!
  """
  Path of the data where the field should point to
  """
  path: [String!]
) repeatable on OBJECT

"""
The @alias directive indicates that aliases of one enum value.
"""
directive @alias(
  options: [String!]
) on ENUM_VALUE

"""
The @cache operator enables caching for the query, field or type it is applied to.
"""
directive @cache(
  """
  Specifies the duration, in milliseconds, of how long the value has to be stored in 
  the cache.
  """
  maxAge: Int!
) on OBJECT | FIELD_DEFINITION

"""
Provides the ability to refer to multiple fields in the Query or Mutation root.
"""
directive @call(
  """
  Enables deduplication of IO operations to enhance performance.This flag prevents 
  duplicate IO requests from being executed concurrently, reducing resource load. Caution: 
  May lead to issues with APIs that expect unique results for identical inputs, such 
  as nonce-based APIs.
  """
  dedupe: Boolean
  """
  Steps are composed together to form a call. If you have multiple steps, the output 
  of the previous step is passed as input to the next step.
  """
  steps: [Step]
) repeatable on FIELD_DEFINITION | OBJECT

"""
The `@expr` operators allows you to specify an expression that can evaluate to a 
value. The expression can be a static value or built form a Mustache template. schema.
"""
directive @expr(
  body: JSON
) repeatable on FIELD_DEFINITION | OBJECT

"""
The @graphQL operator allows to specify GraphQL API server request to fetch data 
from.
"""
directive @graphQL(
  """
  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)
  """
  args: [KeyValue]
  """
  If the upstream GraphQL server supports request batching, you can specify the 'batch' 
  argument to batch several requests into a single batch request.Make sure you have 
  also specified batch settings to the `@upstream` and to the `@graphQL` operator.
  """
  batch: Boolean
  """
  Enables deduplication of IO operations to enhance performance.This flag prevents 
  duplicate IO requests from being executed concurrently, reducing resource load. Caution: 
  May lead to issues with APIs that expect unique results for identical inputs, such 
  as nonce-based APIs.
  """
  dedupe: Boolean
  """
  The headers parameter allows you to customize the headers of the GraphQL request 
  made by the `@graphQL` operator. It is used by specifying a key-value map of header 
  names and their values.
  """
  headers: [KeyValue]
  """
  Specifies the root field on the upstream to request data from. This maps a field 
  in your schema to a field in the upstream schema. When a query is received for this 
  field, Tailcall requests data from the corresponding upstream field.
  """
  name: String!
  """
  This refers URL of the API.
  """
  url: String!
) repeatable on FIELD_DEFINITION | OBJECT

"""
The @grpc operator indicates that a field or node is backed by a gRPC API.For instance, 
if you add the @grpc operator to the `users` field of the Query type with a service 
argument of `NewsService` and method argument of `GetAllNews`, it signifies that 
the `users` field is backed by a gRPC API. The `service` argument specifies the name 
of the gRPC service. The `method` argument specifies the name of the gRPC method. 
In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint 
specified when the `users` field is queried.
"""
directive @grpc(
  """
  The `batchKey` dictates the path Tailcall will follow to group the returned items 
  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  batchKey: [String!]
  """
  This refers to the arguments of your gRPC call. You can pass it as a static object 
  or use Mustache template for dynamic parameters. These parameters will be added in 
  the body in `protobuf` format.
  """
  body: JSON
  """
  Enables deduplication of IO operations to enhance performance.This flag prevents 
  duplicate IO requests from being executed concurrently, reducing resource load. Caution: 
  May lead to issues with APIs that expect unique results for identical inputs, such 
  as nonce-based APIs.
  """
  dedupe: Boolean
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@grpc` operator. It is used by specifying a key-value map of header names 
  and their values. Note: content-type is automatically set to application/grpc
  """
  headers: [KeyValue]
  """
  This refers to the gRPC method you're going to call. For instance `GetAllNews`.
  """
  method: String!
  """
  Specifies a JavaScript function to be executed after receiving the response body. 
  This function can modify or transform the response body before it's sent back to 
  the client.
  """
  onResponseBody: String
  """
  You can use `select` with mustache syntax to re-construct the directives response 
  to the desired format. This is useful when data are deeply nested or want to keep 
  specific fields only from the response.* EXAMPLE 1: if we have a call that returns 
  `{ "user": { "items": [...], ... } ... }` we can use `"{{.user.items}}"`, to extract 
  the `items`. * EXAMPLE 2: if we have a call that returns `{ "foo": "bar", "fizz": 
  { "buzz": "eggs", ... }, ... }` we can use { foo: "{{.foo}}", buzz: "{{.fizz.buzz}}" 
  }`
  """
  select: JSON
  """
  This refers to URL of the API.
  """
  url: String!
) repeatable on FIELD_DEFINITION | OBJECT

"""
The @http operator indicates that a field or node is backed by a REST API.For instance, 
if you add the @http operator to the `users` field of the Query type with a path 
argument of `"/users"`, it signifies that the `users` field is backed by a REST API. 
The path argument specifies the path of the REST API. In this scenario, the GraphQL 
server will make a GET request to the API endpoint specified when the `users` field 
is queried.
"""
directive @http(
  """
  The `batchKey` dictates the path Tailcall will follow to group the returned items 
  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  batchKey: [String!]
  """
  The body of the API call. It's used for methods like POST or PUT that send data to 
  the server. You can pass it as a static object or use a Mustache template with object 
  to substitute variables from the GraphQL variables.
  """
  body: JSON
  """
  Enables deduplication of IO operations to enhance performance.This flag prevents 
  duplicate IO requests from being executed concurrently, reducing resource load. Caution: 
  May lead to issues with APIs that expect unique results for identical inputs, such 
  as nonce-based APIs.
  """
  dedupe: Boolean
  """
  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` 
  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.
  """
  encoding: Encoding
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@http` operator. It is used by specifying a key-value map of header names 
  and their values.
  """
  headers: [KeyValue]
  """
  Schema of the input of the API call. It is automatically inferred in most cases.
  """
  input: Schema
  """
  This refers to the HTTP method of the API call. Commonly used methods include `GET`, 
  `POST`, `PUT`, `DELETE` etc. @default `GET`.
  """
  method: Method
  """
  onRequest field in @http directive gives the ability to specify the request interception 
  handler.
  """
  onRequest: String
  """
  Specifies a JavaScript function to be executed after receiving the response body. 
  This function can modify or transform the response body before it's sent back to 
  the client.
  """
  onResponseBody: String
  """
  Schema of the output of the API call. It is automatically inferred in most cases.
  """
  output: Schema
  """
  This represents the query parameters of your API call. You can pass it as a static 
  object or use Mustache template for dynamic parameters. These parameters will be 
  added to the URL. NOTE: Query parameter order is critical for batching in Tailcall. 
  The first parameter referencing a field in the current value using mustache syntax 
  is automatically selected as the batching parameter.
  """
  query: [URLQuery]
  """
  You can use `select` with mustache syntax to re-construct the directives response 
  to the desired format. This is useful when data are deeply nested or want to keep 
  specific fields only from the response.* EXAMPLE 1: if we have a call that returns 
  `{ "user": { "items": [...], ... } ... }` we can use `"{{.user.items}}"`, to extract 
  the `items`. * EXAMPLE 2: if we have a call that returns `{ "foo": "bar", "fizz": 
  { "buzz": "eggs", ... }, ... }` we can use { foo: "{{.foo}}", buzz: "{{.fizz.buzz}}" 
  }`
  """
  select: JSON
  """
  This refers to URL of the API.
  """
  url: String!
) repeatable on FIELD_DEFINITION | OBJECT

directive @js(
  name: String!
) repeatable on FIELD_DEFINITION | OBJECT

directive @modify(
  name: String
  omit: Boolean
) on FIELD_DEFINITION

"""
Used to omit a field from public consumption.
"""
directive @omit on FIELD_DEFINITION

"""
Specifies the authentication requirements for accessing a field or type.This allows 
you to control access by listing the IDs of authentication providers. - If `id` is 
not provided, all available providers must authorize the request. - If multiple provider 
IDs are listed, the request must be authorized by all of them.Example: If you want 
only specific providers to allow access, include their IDs in the list. Otherwise, 
leave it empty to require authorization from all available providers.
"""
directive @protected(
  """
  List of authentication provider IDs that can access this field or type. - Leave empty 
  to require authorization from all providers. - Include multiple IDs to require authorization 
  from each one.
  """
  id: [String!]
) on OBJECT | FIELD_DEFINITION

"""
The `@discriminate` directive is used to drive Tailcall discriminator to use a field 
of an object to resolve the type. For example with the directive applied on a field 
`@discriminate(field: "object_type")` and the given value `{"foo": "bar", "object_type": 
"Buzz"}` the resolved type of the object will be `Buzz`. If `field` is not applied 
it defaults to "type". The `field` does not have to be part of the GraphQL Schema, 
but it is required to be part of the JSON response. In case this field is missing 
from the response an appropriate error message will be displayed.
"""
directive @discriminate(
  field: String
) on FIELD_DEFINITION

"""
Empty scalar type represents an empty value.
"""
scalar Empty

"""
Field whose value conforms to the standard internet email address format as specified 
in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar Email

"""
Field whose value conforms to the standard E.164 format as specified in E.164 specification 
(https://en.wikipedia.org/wiki/E.164).
"""
scalar PhoneNumber

"""
Field whose value conforms to the standard date format as specified in RFC 3339 (https://datatracker.ietf.org/doc/html/rfc3339).
"""
scalar Date

"""
Field whose value conforms to the standard datetime format as specified in RFC 3339 
(https://datatracker.ietf.org/doc/html/rfc3339").
"""
scalar DateTime

"""
Field whose value conforms to the standard URL format as specified in RFC 3986 (https://datatracker.ietf.org/doc/html/rfc3986).
"""
scalar Url

"""
Field whose value conforms to the standard JSON format as specified in RFC 8259 (https://datatracker.ietf.org/doc/html/rfc8259).
"""
scalar JSON

"""
Field whose value is an 8-bit signed integer.
"""
scalar Int8

"""
Field whose value is a 16-bit signed integer.
"""
scalar Int16

"""
Field whose value is a 32-bit signed integer.
"""
scalar Int32

"""
Field whose value is a 64-bit signed integer.
"""
scalar Int64

"""
Field whose value is a 128-bit signed integer.
"""
scalar Int128

"""
Field whose value is an 8-bit unsigned integer.
"""
scalar UInt8

"""
Field whose value is a 16-bit unsigned integer.
"""
scalar UInt16

"""
Field whose value is a 32-bit unsigned integer.
"""
scalar UInt32

"""
Field whose value is a 64-bit unsigned integer.
"""
scalar UInt64

"""
Field whose value is a 128-bit unsigned integer.
"""
scalar UInt128

"""
Field whose value is a sequence of bytes.
"""
scalar Bytes

"""
Provides the ability to refer to a field defined in the root Query or Mutation.
"""
input Step {
  """
  The arguments that will override the actual arguments of the field.
  """
  args: JSON
  """
  The name of the field on the `Mutation` type that you want to call.
  """
  mutation: String
  """
  The name of the field on the `Query` type that you want to call.
  """
  query: String
}

input KeyValue {
  key: String!
  value: String!
}

"""
The URLQuery input type represents a query parameter to be included in a URL.
"""
input URLQuery {
  """
  The key or name of the query parameter.
  """
  key: String!
  """
  Determines whether to ignore query parameters with empty values.
  """
  skipEmpty: Boolean
  """
  The actual value or a mustache template to resolve the value dynamically for the 
  query parameter.
  """
  value: String!
}

input Schema {
  Obj: JSON
  Arr: Schema
  Opt: Schema
  Enum: [String!]
}

"""
The @graphQL operator allows to specify GraphQL API server request to fetch data 
from.
"""
input GraphQL {
  """
  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)
  """
  args: [KeyValue]
  """
  If the upstream GraphQL server supports request batching, you can specify the 'batch' 
  argument to batch several requests into a single batch request.Make sure you have 
  also specified batch settings to the `@upstream` and to the `@graphQL` operator.
  """
  batch: Boolean
  """
  Enables deduplication of IO operations to enhance performance.This flag prevents 
  duplicate IO requests from being executed concurrently, reducing resource load. Caution: 
  May lead to issues with APIs that expect unique results for identical inputs, such 
  as nonce-based APIs.
  """
  dedupe: Boolean
  """
  The headers parameter allows you to customize the headers of the GraphQL request 
  made by the `@graphQL` operator. It is used by specifying a key-value map of header 
  names and their values.
  """
  headers: [KeyValue]
  """
  Specifies the root field on the upstream to request data from. This maps a field 
  in your schema to a field in the upstream schema. When a query is received for this 
  field, Tailcall requests data from the corresponding upstream field.
  """
  name: String!
  """
  This refers URL of the API.
  """
  url: String!
}

"""
The @grpc operator indicates that a field or node is backed by a gRPC API.For instance, 
if you add the @grpc operator to the `users` field of the Query type with a service 
argument of `NewsService` and method argument of `GetAllNews`, it signifies that 
the `users` field is backed by a gRPC API. The `service` argument specifies the name 
of the gRPC service. The `method` argument specifies the name of the gRPC method. 
In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint 
specified when the `users` field is queried.
"""
input Grpc {
  """
  The `batchKey` dictates the path Tailcall will follow to group the returned items 
  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  batchKey: [String!]
  """
  This refers to the arguments of your gRPC call. You can pass it as a static object 
  or use Mustache template for dynamic parameters. These parameters will be added in 
  the body in `protobuf` format.
  """
  body: JSON
  """
  Enables deduplication of IO operations to enhance performance.This flag prevents 
  duplicate IO requests from being executed concurrently, reducing resource load. Caution: 
  May lead to issues with APIs that expect unique results for identical inputs, such 
  as nonce-based APIs.
  """
  dedupe: Boolean
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@grpc` operator. It is used by specifying a key-value map of header names 
  and their values. Note: content-type is automatically set to application/grpc
  """
  headers: [KeyValue]
  """
  This refers to the gRPC method you're going to call. For instance `GetAllNews`.
  """
  method: String!
  """
  Specifies a JavaScript function to be executed after receiving the response body. 
  This function can modify or transform the response body before it's sent back to 
  the client.
  """
  onResponseBody: String
  """
  You can use `select` with mustache syntax to re-construct the directives response 
  to the desired format. This is useful when data are deeply nested or want to keep 
  specific fields only from the response.* EXAMPLE 1: if we have a call that returns 
  `{ "user": { "items": [...], ... } ... }` we can use `"{{.user.items}}"`, to extract 
  the `items`. * EXAMPLE 2: if we have a call that returns `{ "foo": "bar", "fizz": 
  { "buzz": "eggs", ... }, ... }` we can use { foo: "{{.foo}}", buzz: "{{.fizz.buzz}}" 
  }`
  """
  select: JSON
  """
  This refers to URL of the API.
  """
  url: String!
}

"""
The @http operator indicates that a field or node is backed by a REST API.For instance, 
if you add the @http operator to the `users` field of the Query type with a path 
argument of `"/users"`, it signifies that the `users` field is backed by a REST API. 
The path argument specifies the path of the REST API. In this scenario, the GraphQL 
server will make a GET request to the API endpoint specified when the `users` field 
is queried.
"""
input Http {
  """
  The `batchKey` dictates the path Tailcall will follow to group the returned items 
  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  batchKey: [String!]
  """
  The body of the API call. It's used for methods like POST or PUT that send data to 
  the server. You can pass it as a static object or use a Mustache template with object 
  to substitute variables from the GraphQL variables.
  """
  body: JSON
  """
  Enables deduplication of IO operations to enhance performance.This flag prevents 
  duplicate IO requests from being executed concurrently, reducing resource load. Caution: 
  May lead to issues with APIs that expect unique results for identical inputs, such 
  as nonce-based APIs.
  """
  dedupe: Boolean
  """
  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` 
  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.
  """
  encoding: Encoding
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@http` operator. It is used by specifying a key-value map of header names 
  and their values.
  """
  headers: [KeyValue]
  """
  Schema of the input of the API call. It is automatically inferred in most cases.
  """
  input: Schema
  """
  This refers to the HTTP method of the API call. Commonly used methods include `GET`, 
  `POST`, `PUT`, `DELETE` etc. @default `GET`.
  """
  method: Method
  """
  onRequest field in @http directive gives the ability to specify the request interception 
  handler.
  """
  onRequest: String
  """
  Specifies a JavaScript function to be executed after receiving the response body. 
  This function can modify or transform the response body before it's sent back to 
  the client.
  """
  onResponseBody: String
  """
  Schema of the output of the API call. It is automatically inferred in most cases.
  """
  output: Schema
  """
  This represents the query parameters of your API call. You can pass it as a static 
  object or use Mustache template for dynamic parameters. These parameters will be 
  added to the URL. NOTE: Query parameter order is critical for batching in Tailcall. 
  The first parameter referencing a field in the current value using mustache syntax 
  is automatically selected as the batching parameter.
  """
  query: [URLQuery]
  """
  You can use `select` with mustache syntax to re-construct the directives response 
  to the desired format. This is useful when data are deeply nested or want to keep 
  specific fields only from the response.* EXAMPLE 1: if we have a call that returns 
  `{ "user": { "items": [...], ... } ... }` we can use `"{{.user.items}}"`, to extract 
  the `items`. * EXAMPLE 2: if we have a call that returns `{ "foo": "bar", "fizz": 
  { "buzz": "eggs", ... }, ... }` we can use { foo: "{{.foo}}", buzz: "{{.fizz.buzz}}" 
  }`
  """
  select: JSON
  """
  This refers to URL of the API.
  """
  url: String!
}

"""
The `@expr` operators allows you to specify an expression that can evaluate to a 
value. The expression can be a static value or built form a Mustache template. schema.
"""
input Expr {
  body: JSON
}

input JS {
  name: String!
}

input Modify {
  name: String
  omit: Boolean
}

"""
The @cache operator enables caching for the query, field or type it is applied to.
"""
input Cache {
  """
  Specifies the duration, in milliseconds, of how long the value has to be stored in 
  the cache.
  """
  maxAge: Int!
}

enum Encoding {
  ApplicationJson
  ApplicationXWwwFormUrlencoded
}

enum Method {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
  CONNECT
  TRACE
}